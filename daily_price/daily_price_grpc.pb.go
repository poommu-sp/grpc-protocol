// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: daily_price/daily_price.proto

package daily_price

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DailyPriceClient is the client API for DailyPrice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DailyPriceClient interface {
	GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error)
	ApproveAndFreeze(ctx context.Context, in *ApproveAndFreezeRequest, opts ...grpc.CallOption) (*Empty, error)
	RollbackApproveAndFreeze(ctx context.Context, in *ApproveAndFreezeRequest, opts ...grpc.CallOption) (*Empty, error)
	Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error)
	RollbackReject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error)
	SendVietnamMsgById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type dailyPriceClient struct {
	cc grpc.ClientConnInterface
}

func NewDailyPriceClient(cc grpc.ClientConnInterface) DailyPriceClient {
	return &dailyPriceClient{cc}
}

func (c *dailyPriceClient) GetById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*GetByIdResponse, error) {
	out := new(GetByIdResponse)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyPriceClient) ApproveAndFreeze(ctx context.Context, in *ApproveAndFreezeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/ApproveAndFreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyPriceClient) RollbackApproveAndFreeze(ctx context.Context, in *ApproveAndFreezeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/RollbackApproveAndFreeze", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyPriceClient) Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyPriceClient) RollbackReject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/RollbackReject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyPriceClient) SendVietnamMsgById(ctx context.Context, in *GetByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/daily_price.DailyPrice/SendVietnamMsgById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyPriceServer is the server API for DailyPrice service.
// All implementations must embed UnimplementedDailyPriceServer
// for forward compatibility
type DailyPriceServer interface {
	GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error)
	ApproveAndFreeze(context.Context, *ApproveAndFreezeRequest) (*Empty, error)
	RollbackApproveAndFreeze(context.Context, *ApproveAndFreezeRequest) (*Empty, error)
	Reject(context.Context, *RejectRequest) (*Empty, error)
	RollbackReject(context.Context, *RejectRequest) (*Empty, error)
	SendVietnamMsgById(context.Context, *GetByIdRequest) (*Empty, error)
	mustEmbedUnimplementedDailyPriceServer()
}

// UnimplementedDailyPriceServer must be embedded to have forward compatible implementations.
type UnimplementedDailyPriceServer struct {
}

func (UnimplementedDailyPriceServer) GetById(context.Context, *GetByIdRequest) (*GetByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedDailyPriceServer) ApproveAndFreeze(context.Context, *ApproveAndFreezeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveAndFreeze not implemented")
}
func (UnimplementedDailyPriceServer) RollbackApproveAndFreeze(context.Context, *ApproveAndFreezeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackApproveAndFreeze not implemented")
}
func (UnimplementedDailyPriceServer) Reject(context.Context, *RejectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedDailyPriceServer) RollbackReject(context.Context, *RejectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackReject not implemented")
}
func (UnimplementedDailyPriceServer) SendVietnamMsgById(context.Context, *GetByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVietnamMsgById not implemented")
}
func (UnimplementedDailyPriceServer) mustEmbedUnimplementedDailyPriceServer() {}

// UnsafeDailyPriceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DailyPriceServer will
// result in compilation errors.
type UnsafeDailyPriceServer interface {
	mustEmbedUnimplementedDailyPriceServer()
}

func RegisterDailyPriceServer(s grpc.ServiceRegistrar, srv DailyPriceServer) {
	s.RegisterService(&DailyPrice_ServiceDesc, srv)
}

func _DailyPrice_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).GetById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyPrice_ApproveAndFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAndFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).ApproveAndFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/ApproveAndFreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).ApproveAndFreeze(ctx, req.(*ApproveAndFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyPrice_RollbackApproveAndFreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveAndFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).RollbackApproveAndFreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/RollbackApproveAndFreeze",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).RollbackApproveAndFreeze(ctx, req.(*ApproveAndFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyPrice_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).Reject(ctx, req.(*RejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyPrice_RollbackReject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).RollbackReject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/RollbackReject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).RollbackReject(ctx, req.(*RejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyPrice_SendVietnamMsgById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyPriceServer).SendVietnamMsgById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daily_price.DailyPrice/SendVietnamMsgById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyPriceServer).SendVietnamMsgById(ctx, req.(*GetByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DailyPrice_ServiceDesc is the grpc.ServiceDesc for DailyPrice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DailyPrice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daily_price.DailyPrice",
	HandlerType: (*DailyPriceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _DailyPrice_GetById_Handler,
		},
		{
			MethodName: "ApproveAndFreeze",
			Handler:    _DailyPrice_ApproveAndFreeze_Handler,
		},
		{
			MethodName: "RollbackApproveAndFreeze",
			Handler:    _DailyPrice_RollbackApproveAndFreeze_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _DailyPrice_Reject_Handler,
		},
		{
			MethodName: "RollbackReject",
			Handler:    _DailyPrice_RollbackReject_Handler,
		},
		{
			MethodName: "SendVietnamMsgById",
			Handler:    _DailyPrice_SendVietnamMsgById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daily_price/daily_price.proto",
}
