// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package working_day

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkingDayClient is the client API for WorkingDay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkingDayClient interface {
	GetGetWorkingDayByDateAndPlantCodes(ctx context.Context, in *WorkingDayPayload, opts ...grpc.CallOption) (*WorkingDayResponse, error)
}

type workingDayClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkingDayClient(cc grpc.ClientConnInterface) WorkingDayClient {
	return &workingDayClient{cc}
}

func (c *workingDayClient) GetGetWorkingDayByDateAndPlantCodes(ctx context.Context, in *WorkingDayPayload, opts ...grpc.CallOption) (*WorkingDayResponse, error) {
	out := new(WorkingDayResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.working_day.WorkingDay/GetGetWorkingDayByDateAndPlantCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkingDayServer is the server API for WorkingDay service.
// All implementations must embed UnimplementedWorkingDayServer
// for forward compatibility
type WorkingDayServer interface {
	GetGetWorkingDayByDateAndPlantCodes(context.Context, *WorkingDayPayload) (*WorkingDayResponse, error)
	mustEmbedUnimplementedWorkingDayServer()
}

// UnimplementedWorkingDayServer must be embedded to have forward compatible implementations.
type UnimplementedWorkingDayServer struct {
}

func (UnimplementedWorkingDayServer) GetGetWorkingDayByDateAndPlantCodes(context.Context, *WorkingDayPayload) (*WorkingDayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGetWorkingDayByDateAndPlantCodes not implemented")
}
func (UnimplementedWorkingDayServer) mustEmbedUnimplementedWorkingDayServer() {}

// UnsafeWorkingDayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkingDayServer will
// result in compilation errors.
type UnsafeWorkingDayServer interface {
	mustEmbedUnimplementedWorkingDayServer()
}

func RegisterWorkingDayServer(s grpc.ServiceRegistrar, srv WorkingDayServer) {
	s.RegisterService(&WorkingDay_ServiceDesc, srv)
}

func _WorkingDay_GetGetWorkingDayByDateAndPlantCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkingDayPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkingDayServer).GetGetWorkingDayByDateAndPlantCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.working_day.WorkingDay/GetGetWorkingDayByDateAndPlantCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkingDayServer).GetGetWorkingDayByDateAndPlantCodes(ctx, req.(*WorkingDayPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkingDay_ServiceDesc is the grpc.ServiceDesc for WorkingDay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkingDay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.working_day.WorkingDay",
	HandlerType: (*WorkingDayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGetWorkingDayByDateAndPlantCodes",
			Handler:    _WorkingDay_GetGetWorkingDayByDateAndPlantCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/working_day_service/working_day.proto",
}
