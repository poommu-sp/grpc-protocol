// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package material_area

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MaterialAreaClient is the client API for MaterialArea service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialAreaClient interface {
	GetMaterialAreaByDateAndPlantCodes(ctx context.Context, in *MaterialAreaPayload, opts ...grpc.CallOption) (*MaterialAreaResponse, error)
}

type materialAreaClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialAreaClient(cc grpc.ClientConnInterface) MaterialAreaClient {
	return &materialAreaClient{cc}
}

func (c *materialAreaClient) GetMaterialAreaByDateAndPlantCodes(ctx context.Context, in *MaterialAreaPayload, opts ...grpc.CallOption) (*MaterialAreaResponse, error) {
	out := new(MaterialAreaResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.material_area.MaterialArea/GetMaterialAreaByDateAndPlantCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialAreaServer is the server API for MaterialArea service.
// All implementations must embed UnimplementedMaterialAreaServer
// for forward compatibility
type MaterialAreaServer interface {
	GetMaterialAreaByDateAndPlantCodes(context.Context, *MaterialAreaPayload) (*MaterialAreaResponse, error)
	mustEmbedUnimplementedMaterialAreaServer()
}

// UnimplementedMaterialAreaServer must be embedded to have forward compatible implementations.
type UnimplementedMaterialAreaServer struct {
}

func (UnimplementedMaterialAreaServer) GetMaterialAreaByDateAndPlantCodes(context.Context, *MaterialAreaPayload) (*MaterialAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterialAreaByDateAndPlantCodes not implemented")
}
func (UnimplementedMaterialAreaServer) mustEmbedUnimplementedMaterialAreaServer() {}

// UnsafeMaterialAreaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialAreaServer will
// result in compilation errors.
type UnsafeMaterialAreaServer interface {
	mustEmbedUnimplementedMaterialAreaServer()
}

func RegisterMaterialAreaServer(s grpc.ServiceRegistrar, srv MaterialAreaServer) {
	s.RegisterService(&MaterialArea_ServiceDesc, srv)
}

func _MaterialArea_GetMaterialAreaByDateAndPlantCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MaterialAreaPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialAreaServer).GetMaterialAreaByDateAndPlantCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.material_area.MaterialArea/GetMaterialAreaByDateAndPlantCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialAreaServer).GetMaterialAreaByDateAndPlantCodes(ctx, req.(*MaterialAreaPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialArea_ServiceDesc is the grpc.ServiceDesc for MaterialArea service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialArea_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.material_area.MaterialArea",
	HandlerType: (*MaterialAreaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterialAreaByDateAndPlantCodes",
			Handler:    _MaterialArea_GetMaterialAreaByDateAndPlantCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/material_area_service/material_area.proto",
}
