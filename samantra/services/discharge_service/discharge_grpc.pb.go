// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package discharge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DischargeClient is the client API for Discharge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DischargeClient interface {
	ListDischarge(ctx context.Context, in *ListDischargePayload, opts ...grpc.CallOption) (*ListDischargeResponse, error)
}

type dischargeClient struct {
	cc grpc.ClientConnInterface
}

func NewDischargeClient(cc grpc.ClientConnInterface) DischargeClient {
	return &dischargeClient{cc}
}

func (c *dischargeClient) ListDischarge(ctx context.Context, in *ListDischargePayload, opts ...grpc.CallOption) (*ListDischargeResponse, error) {
	out := new(ListDischargeResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.discharge.Discharge/ListDischarge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DischargeServer is the server API for Discharge service.
// All implementations must embed UnimplementedDischargeServer
// for forward compatibility
type DischargeServer interface {
	ListDischarge(context.Context, *ListDischargePayload) (*ListDischargeResponse, error)
	mustEmbedUnimplementedDischargeServer()
}

// UnimplementedDischargeServer must be embedded to have forward compatible implementations.
type UnimplementedDischargeServer struct {
}

func (UnimplementedDischargeServer) ListDischarge(context.Context, *ListDischargePayload) (*ListDischargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDischarge not implemented")
}
func (UnimplementedDischargeServer) mustEmbedUnimplementedDischargeServer() {}

// UnsafeDischargeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DischargeServer will
// result in compilation errors.
type UnsafeDischargeServer interface {
	mustEmbedUnimplementedDischargeServer()
}

func RegisterDischargeServer(s grpc.ServiceRegistrar, srv DischargeServer) {
	s.RegisterService(&Discharge_ServiceDesc, srv)
}

func _Discharge_ListDischarge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDischargePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DischargeServer).ListDischarge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.discharge.Discharge/ListDischarge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DischargeServer).ListDischarge(ctx, req.(*ListDischargePayload))
	}
	return interceptor(ctx, in, info, handler)
}

// Discharge_ServiceDesc is the grpc.ServiceDesc for Discharge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Discharge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.discharge.Discharge",
	HandlerType: (*DischargeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDischarge",
			Handler:    _Discharge_ListDischarge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/discharge_service/discharge.proto",
}
