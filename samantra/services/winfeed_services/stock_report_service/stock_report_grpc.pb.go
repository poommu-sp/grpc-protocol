// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package stock_report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockReportClient is the client API for StockReport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockReportClient interface {
	Get(ctx context.Context, in *StockReportPayload, opts ...grpc.CallOption) (*StockReportResponse, error)
	GetStockReportProductCode(ctx context.Context, in *GetStockReportProductCodeRequest, opts ...grpc.CallOption) (*GetStockReportProductCodeResponse, error)
}

type stockReportClient struct {
	cc grpc.ClientConnInterface
}

func NewStockReportClient(cc grpc.ClientConnInterface) StockReportClient {
	return &stockReportClient{cc}
}

func (c *stockReportClient) Get(ctx context.Context, in *StockReportPayload, opts ...grpc.CallOption) (*StockReportResponse, error) {
	out := new(StockReportResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.winfeed.stock_report.StockReport/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockReportClient) GetStockReportProductCode(ctx context.Context, in *GetStockReportProductCodeRequest, opts ...grpc.CallOption) (*GetStockReportProductCodeResponse, error) {
	out := new(GetStockReportProductCodeResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.winfeed.stock_report.StockReport/GetStockReportProductCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockReportServer is the server API for StockReport service.
// All implementations must embed UnimplementedStockReportServer
// for forward compatibility
type StockReportServer interface {
	Get(context.Context, *StockReportPayload) (*StockReportResponse, error)
	GetStockReportProductCode(context.Context, *GetStockReportProductCodeRequest) (*GetStockReportProductCodeResponse, error)
	mustEmbedUnimplementedStockReportServer()
}

// UnimplementedStockReportServer must be embedded to have forward compatible implementations.
type UnimplementedStockReportServer struct {
}

func (UnimplementedStockReportServer) Get(context.Context, *StockReportPayload) (*StockReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedStockReportServer) GetStockReportProductCode(context.Context, *GetStockReportProductCodeRequest) (*GetStockReportProductCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockReportProductCode not implemented")
}
func (UnimplementedStockReportServer) mustEmbedUnimplementedStockReportServer() {}

// UnsafeStockReportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockReportServer will
// result in compilation errors.
type UnsafeStockReportServer interface {
	mustEmbedUnimplementedStockReportServer()
}

func RegisterStockReportServer(s grpc.ServiceRegistrar, srv StockReportServer) {
	s.RegisterService(&StockReport_ServiceDesc, srv)
}

func _StockReport_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReportPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockReportServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.winfeed.stock_report.StockReport/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockReportServer).Get(ctx, req.(*StockReportPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockReport_GetStockReportProductCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStockReportProductCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockReportServer).GetStockReportProductCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.winfeed.stock_report.StockReport/GetStockReportProductCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockReportServer).GetStockReportProductCode(ctx, req.(*GetStockReportProductCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockReport_ServiceDesc is the grpc.ServiceDesc for StockReport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockReport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.winfeed.stock_report.StockReport",
	HandlerType: (*StockReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _StockReport_Get_Handler,
		},
		{
			MethodName: "GetStockReportProductCode",
			Handler:    _StockReport_GetStockReportProductCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/winfeed_services/stock_report_service/stock_report.proto",
}
