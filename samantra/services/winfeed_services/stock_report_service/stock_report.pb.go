// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: samantra/services/winfeed_services/stock_report_service/stock_report.proto

package stock_report

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StockReportPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate int64 `protobuf:"varint,1,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate   int64 `protobuf:"varint,2,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
	QuanType  int64 `protobuf:"varint,3,opt,name=QuanType,proto3" json:"QuanType,omitempty"`
}

func (x *StockReportPayload) Reset() {
	*x = StockReportPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockReportPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockReportPayload) ProtoMessage() {}

func (x *StockReportPayload) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockReportPayload.ProtoReflect.Descriptor instead.
func (*StockReportPayload) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{0}
}

func (x *StockReportPayload) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *StockReportPayload) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *StockReportPayload) GetQuanType() int64 {
	if x != nil {
		return x.QuanType
	}
	return 0
}

type GetStockReportProductCodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate int64 `protobuf:"varint,1,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	EndDate   int64 `protobuf:"varint,2,opt,name=EndDate,proto3" json:"EndDate,omitempty"`
}

func (x *GetStockReportProductCodeRequest) Reset() {
	*x = GetStockReportProductCodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockReportProductCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockReportProductCodeRequest) ProtoMessage() {}

func (x *GetStockReportProductCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockReportProductCodeRequest.ProtoReflect.Descriptor instead.
func (*GetStockReportProductCodeRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{1}
}

func (x *GetStockReportProductCodeRequest) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *GetStockReportProductCodeRequest) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

type StockReportFeedmillQuantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgCode          string  `protobuf:"bytes,1,opt,name=OrgCode,proto3" json:"OrgCode,omitempty"`
	FactoryShortName string  `protobuf:"bytes,2,opt,name=FactoryShortName,proto3" json:"FactoryShortName,omitempty"`
	Quantity         float64 `protobuf:"fixed64,3,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *StockReportFeedmillQuantity) Reset() {
	*x = StockReportFeedmillQuantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockReportFeedmillQuantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockReportFeedmillQuantity) ProtoMessage() {}

func (x *StockReportFeedmillQuantity) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockReportFeedmillQuantity.ProtoReflect.Descriptor instead.
func (*StockReportFeedmillQuantity) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{2}
}

func (x *StockReportFeedmillQuantity) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *StockReportFeedmillQuantity) GetFactoryShortName() string {
	if x != nil {
		return x.FactoryShortName
	}
	return ""
}

func (x *StockReportFeedmillQuantity) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type StockReportItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductNameInReportID      int32                          `protobuf:"varint,1,opt,name=ProductNameInReportID,proto3" json:"ProductNameInReportID,omitempty"`
	ProductNameInReportName    string                         `protobuf:"bytes,2,opt,name=ProductNameInReportName,proto3" json:"ProductNameInReportName,omitempty"`
	SubProductNameInReportID   int32                          `protobuf:"varint,3,opt,name=SubProductNameInReportID,proto3" json:"SubProductNameInReportID,omitempty"`
	SubProductNameInReportName string                         `protobuf:"bytes,4,opt,name=SubProductNameInReportName,proto3" json:"SubProductNameInReportName,omitempty"`
	LotNo                      string                         `protobuf:"bytes,5,opt,name=LotNo,proto3" json:"LotNo,omitempty"`
	FeedmillQuantities         []*StockReportFeedmillQuantity `protobuf:"bytes,6,rep,name=FeedmillQuantities,proto3" json:"FeedmillQuantities,omitempty"`
	SumQuantity                float64                        `protobuf:"fixed64,7,opt,name=SumQuantity,proto3" json:"SumQuantity,omitempty"`
	IsMain                     bool                           `protobuf:"varint,8,opt,name=IsMain,proto3" json:"IsMain,omitempty"`
	IsShown                    bool                           `protobuf:"varint,9,opt,name=IsShown,proto3" json:"IsShown,omitempty"`
}

func (x *StockReportItem) Reset() {
	*x = StockReportItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockReportItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockReportItem) ProtoMessage() {}

func (x *StockReportItem) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockReportItem.ProtoReflect.Descriptor instead.
func (*StockReportItem) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{3}
}

func (x *StockReportItem) GetProductNameInReportID() int32 {
	if x != nil {
		return x.ProductNameInReportID
	}
	return 0
}

func (x *StockReportItem) GetProductNameInReportName() string {
	if x != nil {
		return x.ProductNameInReportName
	}
	return ""
}

func (x *StockReportItem) GetSubProductNameInReportID() int32 {
	if x != nil {
		return x.SubProductNameInReportID
	}
	return 0
}

func (x *StockReportItem) GetSubProductNameInReportName() string {
	if x != nil {
		return x.SubProductNameInReportName
	}
	return ""
}

func (x *StockReportItem) GetLotNo() string {
	if x != nil {
		return x.LotNo
	}
	return ""
}

func (x *StockReportItem) GetFeedmillQuantities() []*StockReportFeedmillQuantity {
	if x != nil {
		return x.FeedmillQuantities
	}
	return nil
}

func (x *StockReportItem) GetSumQuantity() float64 {
	if x != nil {
		return x.SumQuantity
	}
	return 0
}

func (x *StockReportItem) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *StockReportItem) GetIsShown() bool {
	if x != nil {
		return x.IsShown
	}
	return false
}

type StockReportProductCodeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCode        string                         `protobuf:"bytes,1,opt,name=ProductCode,proto3" json:"ProductCode,omitempty"`
	LotNo              string                         `protobuf:"bytes,2,opt,name=LotNo,proto3" json:"LotNo,omitempty"`
	GradeCode          string                         `protobuf:"bytes,3,opt,name=GradeCode,proto3" json:"GradeCode,omitempty"`
	FeedmillQuantities []*StockReportFeedmillQuantity `protobuf:"bytes,4,rep,name=FeedmillQuantities,proto3" json:"FeedmillQuantities,omitempty"`
	SumQuantity        float64                        `protobuf:"fixed64,5,opt,name=SumQuantity,proto3" json:"SumQuantity,omitempty"`
}

func (x *StockReportProductCodeItem) Reset() {
	*x = StockReportProductCodeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockReportProductCodeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockReportProductCodeItem) ProtoMessage() {}

func (x *StockReportProductCodeItem) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockReportProductCodeItem.ProtoReflect.Descriptor instead.
func (*StockReportProductCodeItem) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{4}
}

func (x *StockReportProductCodeItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *StockReportProductCodeItem) GetLotNo() string {
	if x != nil {
		return x.LotNo
	}
	return ""
}

func (x *StockReportProductCodeItem) GetGradeCode() string {
	if x != nil {
		return x.GradeCode
	}
	return ""
}

func (x *StockReportProductCodeItem) GetFeedmillQuantities() []*StockReportFeedmillQuantity {
	if x != nil {
		return x.FeedmillQuantities
	}
	return nil
}

func (x *StockReportProductCodeItem) GetSumQuantity() float64 {
	if x != nil {
		return x.SumQuantity
	}
	return 0
}

type StockReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockReportList []*StockReportItem `protobuf:"bytes,1,rep,name=StockReportList,proto3" json:"StockReportList,omitempty"`
}

func (x *StockReportResponse) Reset() {
	*x = StockReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockReportResponse) ProtoMessage() {}

func (x *StockReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockReportResponse.ProtoReflect.Descriptor instead.
func (*StockReportResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{5}
}

func (x *StockReportResponse) GetStockReportList() []*StockReportItem {
	if x != nil {
		return x.StockReportList
	}
	return nil
}

type GetStockReportProductCodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StockReportProductCodeList []*StockReportProductCodeItem `protobuf:"bytes,1,rep,name=StockReportProductCodeList,proto3" json:"StockReportProductCodeList,omitempty"`
}

func (x *GetStockReportProductCodeResponse) Reset() {
	*x = GetStockReportProductCodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStockReportProductCodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStockReportProductCodeResponse) ProtoMessage() {}

func (x *GetStockReportProductCodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStockReportProductCodeResponse.ProtoReflect.Descriptor instead.
func (*GetStockReportProductCodeResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP(), []int{6}
}

func (x *GetStockReportProductCodeResponse) GetStockReportProductCodeList() []*StockReportProductCodeItem {
	if x != nil {
		return x.StockReportProductCodeList
	}
	return nil
}

var File_samantra_services_winfeed_services_stock_report_service_stock_report_proto protoreflect.FileDescriptor

var file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDesc = []byte{
	0x0a, 0x4a, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x68, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x5a,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x7f, 0x0a, 0x1b, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c,
	0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x67, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xdc, 0x03, 0x0a, 0x0f,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x34, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3a, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x18, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x12, 0x3e, 0x0a, 0x1a, 0x53,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x1a, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x6f, 0x74, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x74, 0x4e,
	0x6f, 0x12, 0x73, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x52, 0x12, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x53, 0x75, 0x6d,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x4d, 0x61,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x49, 0x73, 0x53, 0x68, 0x6f, 0x77, 0x6e, 0x22, 0x89, 0x02, 0x0a, 0x1a, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x6f, 0x74, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x74, 0x4e,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x73, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x12, 0x46, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x53, 0x75, 0x6d, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x78, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a,
	0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xa8, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x1a, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x1a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xc5, 0x02, 0x0a, 0x0b,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x03,
	0x47, 0x65, 0x74, 0x12, 0x3a, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x1a,
	0x3b, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb2,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x2e, 0x73,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x7b, 0x5a, 0x79, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x66, 0x69, 0x74, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x73, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x77, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x3b, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescOnce sync.Once
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescData = file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDesc
)

func file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescGZIP() []byte {
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescOnce.Do(func() {
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescData)
	})
	return file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDescData
}

var file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_goTypes = []interface{}{
	(*StockReportPayload)(nil),                // 0: samantra.services.winfeed.stock_report.StockReportPayload
	(*GetStockReportProductCodeRequest)(nil),  // 1: samantra.services.winfeed.stock_report.GetStockReportProductCodeRequest
	(*StockReportFeedmillQuantity)(nil),       // 2: samantra.services.winfeed.stock_report.StockReportFeedmillQuantity
	(*StockReportItem)(nil),                   // 3: samantra.services.winfeed.stock_report.StockReportItem
	(*StockReportProductCodeItem)(nil),        // 4: samantra.services.winfeed.stock_report.StockReportProductCodeItem
	(*StockReportResponse)(nil),               // 5: samantra.services.winfeed.stock_report.StockReportResponse
	(*GetStockReportProductCodeResponse)(nil), // 6: samantra.services.winfeed.stock_report.GetStockReportProductCodeResponse
}
var file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_depIdxs = []int32{
	2, // 0: samantra.services.winfeed.stock_report.StockReportItem.FeedmillQuantities:type_name -> samantra.services.winfeed.stock_report.StockReportFeedmillQuantity
	2, // 1: samantra.services.winfeed.stock_report.StockReportProductCodeItem.FeedmillQuantities:type_name -> samantra.services.winfeed.stock_report.StockReportFeedmillQuantity
	3, // 2: samantra.services.winfeed.stock_report.StockReportResponse.StockReportList:type_name -> samantra.services.winfeed.stock_report.StockReportItem
	4, // 3: samantra.services.winfeed.stock_report.GetStockReportProductCodeResponse.StockReportProductCodeList:type_name -> samantra.services.winfeed.stock_report.StockReportProductCodeItem
	0, // 4: samantra.services.winfeed.stock_report.StockReport.Get:input_type -> samantra.services.winfeed.stock_report.StockReportPayload
	1, // 5: samantra.services.winfeed.stock_report.StockReport.GetStockReportProductCode:input_type -> samantra.services.winfeed.stock_report.GetStockReportProductCodeRequest
	5, // 6: samantra.services.winfeed.stock_report.StockReport.Get:output_type -> samantra.services.winfeed.stock_report.StockReportResponse
	6, // 7: samantra.services.winfeed.stock_report.StockReport.GetStockReportProductCode:output_type -> samantra.services.winfeed.stock_report.GetStockReportProductCodeResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_init() }
func file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_init() {
	if File_samantra_services_winfeed_services_stock_report_service_stock_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockReportPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockReportProductCodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockReportFeedmillQuantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockReportItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockReportProductCodeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStockReportProductCodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_goTypes,
		DependencyIndexes: file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_depIdxs,
		MessageInfos:      file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_msgTypes,
	}.Build()
	File_samantra_services_winfeed_services_stock_report_service_stock_report_proto = out.File
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_rawDesc = nil
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_goTypes = nil
	file_samantra_services_winfeed_services_stock_report_service_stock_report_proto_depIdxs = nil
}
