// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.3
// source: samantra/services/winfeed_services/contract_report_service/contract_report.proto

package contract_report

import (
	proto "github.com/golang/protobuf/proto"
	master_service "gitlab.com/fitdigital/digitization/grpc-protocol.git/samantra/services/master_service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetSummaryByProductCodesAndDateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCodes []string `protobuf:"bytes,1,rep,name=ProductCodes,proto3" json:"ProductCodes,omitempty"`
	Date         string   `protobuf:"bytes,2,opt,name=Date,proto3" json:"Date,omitempty"`
	TimeTwoDigit string   `protobuf:"bytes,3,opt,name=TimeTwoDigit,proto3" json:"TimeTwoDigit,omitempty"`
}

func (x *GetSummaryByProductCodesAndDateRequest) Reset() {
	*x = GetSummaryByProductCodesAndDateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryByProductCodesAndDateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryByProductCodesAndDateRequest) ProtoMessage() {}

func (x *GetSummaryByProductCodesAndDateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryByProductCodesAndDateRequest.ProtoReflect.Descriptor instead.
func (*GetSummaryByProductCodesAndDateRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP(), []int{0}
}

func (x *GetSummaryByProductCodesAndDateRequest) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

func (x *GetSummaryByProductCodesAndDateRequest) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *GetSummaryByProductCodesAndDateRequest) GetTimeTwoDigit() string {
	if x != nil {
		return x.TimeTwoDigit
	}
	return ""
}

type GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=Date,proto3" json:"Date,omitempty"`
	TimeDigit    string                 `protobuf:"bytes,2,opt,name=TimeDigit,proto3" json:"TimeDigit,omitempty"`
	ProductCodes []string               `protobuf:"bytes,3,rep,name=ProductCodes,proto3" json:"ProductCodes,omitempty"`
	PlantCodes   []string               `protobuf:"bytes,4,rep,name=PlantCodes,proto3" json:"PlantCodes,omitempty"`
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) Reset() {
	*x = GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) ProtoMessage() {}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest.ProtoReflect.Descriptor instead.
func (*GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP(), []int{1}
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) GetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) GetTimeDigit() string {
	if x != nil {
		return x.TimeDigit
	}
	return ""
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

func (x *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) GetPlantCodes() []string {
	if x != nil {
		return x.PlantCodes
	}
	return nil
}

type ContractSummaryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                         string    `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ReceivedDate               string    `protobuf:"bytes,2,opt,name=ReceivedDate,proto3" json:"ReceivedDate,omitempty"`
	ReceivedTime               string    `protobuf:"bytes,3,opt,name=ReceivedTime,proto3" json:"ReceivedTime,omitempty"`
	PlantCode                  string    `protobuf:"bytes,4,opt,name=PlantCode,proto3" json:"PlantCode,omitempty"`
	PlantName                  string    `protobuf:"bytes,5,opt,name=PlantName,proto3" json:"PlantName,omitempty"`
	OrgCode                    string    `protobuf:"bytes,6,opt,name=OrgCode,proto3" json:"OrgCode,omitempty"`
	OrgName                    string    `protobuf:"bytes,7,opt,name=OrgName,proto3" json:"OrgName,omitempty"`
	ProductGroup               string    `protobuf:"bytes,8,opt,name=ProductGroup,proto3" json:"ProductGroup,omitempty"`
	ProductGroupName           string    `protobuf:"bytes,9,opt,name=ProductGroupName,proto3" json:"ProductGroupName,omitempty"`
	ProductCode                string    `protobuf:"bytes,10,opt,name=ProductCode,proto3" json:"ProductCode,omitempty"`
	ProductName                string    `protobuf:"bytes,11,opt,name=ProductName,proto3" json:"ProductName,omitempty"`
	ContractStatus             string    `protobuf:"bytes,12,opt,name=ContractStatus,proto3" json:"ContractStatus,omitempty"`
	DivisionCode               string    `protobuf:"bytes,13,opt,name=DivisionCode,proto3" json:"DivisionCode,omitempty"`
	ContractNO                 string    `protobuf:"bytes,14,opt,name=ContractNO,proto3" json:"ContractNO,omitempty"`
	TransferFlag               string    `protobuf:"bytes,15,opt,name=TransferFlag,proto3" json:"TransferFlag,omitempty"`
	VendorCode                 string    `protobuf:"bytes,16,opt,name=VendorCode,proto3" json:"VendorCode,omitempty"`
	VendorName                 string    `protobuf:"bytes,17,opt,name=VendorName,proto3" json:"VendorName,omitempty"`
	ContractDate               string    `protobuf:"bytes,18,opt,name=ContractDate,proto3" json:"ContractDate,omitempty"`
	StartDate                  string    `protobuf:"bytes,19,opt,name=StartDate,proto3" json:"StartDate,omitempty"`
	ExpireDate                 string    `protobuf:"bytes,20,opt,name=ExpireDate,proto3" json:"ExpireDate,omitempty"`
	ContractWeight             float64   `protobuf:"fixed64,21,opt,name=ContractWeight,proto3" json:"ContractWeight,omitempty"`
	BalanceWeight              float64   `protobuf:"fixed64,22,opt,name=BalanceWeight,proto3" json:"BalanceWeight,omitempty"`
	Status                     string    `protobuf:"bytes,23,opt,name=Status,proto3" json:"Status,omitempty"`
	UnitPrice                  float64   `protobuf:"fixed64,24,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	SpecMax                    float64   `protobuf:"fixed64,25,opt,name=SpecMax,proto3" json:"SpecMax,omitempty"`
	SpecMin                    float64   `protobuf:"fixed64,26,opt,name=SpecMin,proto3" json:"SpecMin,omitempty"`
	SpecAdjustPrice            float64   `protobuf:"fixed64,27,opt,name=SpecAdjustPrice,proto3" json:"SpecAdjustPrice,omitempty"`
	IsActive                   bool      `protobuf:"varint,28,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	ProductNameInReportName    string    `protobuf:"bytes,29,opt,name=ProductNameInReportName,proto3" json:"ProductNameInReportName,omitempty"`
	SubProductNameInReportName string    `protobuf:"bytes,30,opt,name=SubProductNameInReportName,proto3" json:"SubProductNameInReportName,omitempty"`
	UnitPrices                 []float64 `protobuf:"fixed64,31,rep,packed,name=UnitPrices,proto3" json:"UnitPrices,omitempty"`
}

func (x *ContractSummaryItem) Reset() {
	*x = ContractSummaryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractSummaryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractSummaryItem) ProtoMessage() {}

func (x *ContractSummaryItem) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractSummaryItem.ProtoReflect.Descriptor instead.
func (*ContractSummaryItem) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP(), []int{2}
}

func (x *ContractSummaryItem) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ContractSummaryItem) GetReceivedDate() string {
	if x != nil {
		return x.ReceivedDate
	}
	return ""
}

func (x *ContractSummaryItem) GetReceivedTime() string {
	if x != nil {
		return x.ReceivedTime
	}
	return ""
}

func (x *ContractSummaryItem) GetPlantCode() string {
	if x != nil {
		return x.PlantCode
	}
	return ""
}

func (x *ContractSummaryItem) GetPlantName() string {
	if x != nil {
		return x.PlantName
	}
	return ""
}

func (x *ContractSummaryItem) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *ContractSummaryItem) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *ContractSummaryItem) GetProductGroup() string {
	if x != nil {
		return x.ProductGroup
	}
	return ""
}

func (x *ContractSummaryItem) GetProductGroupName() string {
	if x != nil {
		return x.ProductGroupName
	}
	return ""
}

func (x *ContractSummaryItem) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *ContractSummaryItem) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *ContractSummaryItem) GetContractStatus() string {
	if x != nil {
		return x.ContractStatus
	}
	return ""
}

func (x *ContractSummaryItem) GetDivisionCode() string {
	if x != nil {
		return x.DivisionCode
	}
	return ""
}

func (x *ContractSummaryItem) GetContractNO() string {
	if x != nil {
		return x.ContractNO
	}
	return ""
}

func (x *ContractSummaryItem) GetTransferFlag() string {
	if x != nil {
		return x.TransferFlag
	}
	return ""
}

func (x *ContractSummaryItem) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *ContractSummaryItem) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *ContractSummaryItem) GetContractDate() string {
	if x != nil {
		return x.ContractDate
	}
	return ""
}

func (x *ContractSummaryItem) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ContractSummaryItem) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

func (x *ContractSummaryItem) GetContractWeight() float64 {
	if x != nil {
		return x.ContractWeight
	}
	return 0
}

func (x *ContractSummaryItem) GetBalanceWeight() float64 {
	if x != nil {
		return x.BalanceWeight
	}
	return 0
}

func (x *ContractSummaryItem) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ContractSummaryItem) GetUnitPrice() float64 {
	if x != nil {
		return x.UnitPrice
	}
	return 0
}

func (x *ContractSummaryItem) GetSpecMax() float64 {
	if x != nil {
		return x.SpecMax
	}
	return 0
}

func (x *ContractSummaryItem) GetSpecMin() float64 {
	if x != nil {
		return x.SpecMin
	}
	return 0
}

func (x *ContractSummaryItem) GetSpecAdjustPrice() float64 {
	if x != nil {
		return x.SpecAdjustPrice
	}
	return 0
}

func (x *ContractSummaryItem) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *ContractSummaryItem) GetProductNameInReportName() string {
	if x != nil {
		return x.ProductNameInReportName
	}
	return ""
}

func (x *ContractSummaryItem) GetSubProductNameInReportName() string {
	if x != nil {
		return x.SubProductNameInReportName
	}
	return ""
}

func (x *ContractSummaryItem) GetUnitPrices() []float64 {
	if x != nil {
		return x.UnitPrices
	}
	return nil
}

type ContractReportSummaryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plant               *master_service.Plant  `protobuf:"bytes,1,opt,name=Plant,proto3" json:"Plant,omitempty"`
	SelectedDayContract []*ContractSummaryItem `protobuf:"bytes,2,rep,name=SelectedDayContract,proto3" json:"SelectedDayContract,omitempty"`
	AnotherDayContract  []*ContractSummaryItem `protobuf:"bytes,3,rep,name=AnotherDayContract,proto3" json:"AnotherDayContract,omitempty"`
	SelectedDayWeight   float64                `protobuf:"fixed64,4,opt,name=SelectedDayWeight,proto3" json:"SelectedDayWeight,omitempty"`
	AnotherDayWeight    float64                `protobuf:"fixed64,5,opt,name=AnotherDayWeight,proto3" json:"AnotherDayWeight,omitempty"`
	TotalWeight         float64                `protobuf:"fixed64,6,opt,name=TotalWeight,proto3" json:"TotalWeight,omitempty"`
}

func (x *ContractReportSummaryItem) Reset() {
	*x = ContractReportSummaryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReportSummaryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReportSummaryItem) ProtoMessage() {}

func (x *ContractReportSummaryItem) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReportSummaryItem.ProtoReflect.Descriptor instead.
func (*ContractReportSummaryItem) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP(), []int{3}
}

func (x *ContractReportSummaryItem) GetPlant() *master_service.Plant {
	if x != nil {
		return x.Plant
	}
	return nil
}

func (x *ContractReportSummaryItem) GetSelectedDayContract() []*ContractSummaryItem {
	if x != nil {
		return x.SelectedDayContract
	}
	return nil
}

func (x *ContractReportSummaryItem) GetAnotherDayContract() []*ContractSummaryItem {
	if x != nil {
		return x.AnotherDayContract
	}
	return nil
}

func (x *ContractReportSummaryItem) GetSelectedDayWeight() float64 {
	if x != nil {
		return x.SelectedDayWeight
	}
	return 0
}

func (x *ContractReportSummaryItem) GetAnotherDayWeight() float64 {
	if x != nil {
		return x.AnotherDayWeight
	}
	return 0
}

func (x *ContractReportSummaryItem) GetTotalWeight() float64 {
	if x != nil {
		return x.TotalWeight
	}
	return 0
}

type ContractReportSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractReportSummaryList []*ContractReportSummaryItem `protobuf:"bytes,1,rep,name=ContractReportSummaryList,proto3" json:"ContractReportSummaryList,omitempty"`
}

func (x *ContractReportSummaryResponse) Reset() {
	*x = ContractReportSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractReportSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractReportSummaryResponse) ProtoMessage() {}

func (x *ContractReportSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractReportSummaryResponse.ProtoReflect.Descriptor instead.
func (*ContractReportSummaryResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP(), []int{4}
}

func (x *ContractReportSummaryResponse) GetContractReportSummaryList() []*ContractReportSummaryItem {
	if x != nil {
		return x.ContractReportSummaryList
	}
	return nil
}

var File_samantra_services_winfeed_services_contract_report_service_contract_report_proto protoreflect.FileDescriptor

var file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDesc = []byte{
	0x0a, 0x50, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x2d, 0x73,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x84, 0x01,
	0x0a, 0x26, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x77, 0x6f, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x77, 0x6f, 0x44,
	0x69, 0x67, 0x69, 0x74, 0x22, 0xd9, 0x01, 0x0a, 0x45, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e,
	0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0xbb, 0x08, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2a, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x4f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x4f,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70,
	0x65, 0x63, 0x4d, 0x61, 0x78, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x53, 0x70, 0x65,
	0x63, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x6e, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x53, 0x70, 0x65, 0x63, 0x4d, 0x69, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x53, 0x70, 0x65, 0x63, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x1a, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1a, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x73, 0x22, 0xb0,
	0x03, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x05,
	0x50, 0x6c, 0x61, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x52, 0x05, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x12, 0x70, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x6e, 0x0a, 0x12, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x44, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x12, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x11, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x44, 0x61, 0x79, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x41,
	0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x32, 0xd5, 0x03, 0x0a, 0x0f, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0xc0, 0x01, 0x0a,
	0x1f, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x51, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xfe, 0x01, 0x0a, 0x3e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x70, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x79, 0x44, 0x61, 0x74, 0x65, 0x41,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x41, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x70, 0x5a, 0x6e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x69, 0x74, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescOnce sync.Once
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescData = file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDesc
)

func file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescGZIP() []byte {
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescOnce.Do(func() {
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescData = protoimpl.X.CompressGZIP(file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescData)
	})
	return file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDescData
}

var file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_goTypes = []interface{}{
	(*GetSummaryByProductCodesAndDateRequest)(nil),                                // 0: samantra.services.winfeed.contract_report.GetSummaryByProductCodesAndDateRequest
	(*GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest)(nil), // 1: samantra.services.winfeed.contract_report.GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest
	(*ContractSummaryItem)(nil),                                                   // 2: samantra.services.winfeed.contract_report.ContractSummaryItem
	(*ContractReportSummaryItem)(nil),                                             // 3: samantra.services.winfeed.contract_report.ContractReportSummaryItem
	(*ContractReportSummaryResponse)(nil),                                         // 4: samantra.services.winfeed.contract_report.ContractReportSummaryResponse
	(*timestamppb.Timestamp)(nil),                                                 // 5: google.protobuf.Timestamp
	(*master_service.Plant)(nil),                                                  // 6: samantra.services.master.Plant
}
var file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_depIdxs = []int32{
	5, // 0: samantra.services.winfeed.contract_report.GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest.Date:type_name -> google.protobuf.Timestamp
	6, // 1: samantra.services.winfeed.contract_report.ContractReportSummaryItem.Plant:type_name -> samantra.services.master.Plant
	2, // 2: samantra.services.winfeed.contract_report.ContractReportSummaryItem.SelectedDayContract:type_name -> samantra.services.winfeed.contract_report.ContractSummaryItem
	2, // 3: samantra.services.winfeed.contract_report.ContractReportSummaryItem.AnotherDayContract:type_name -> samantra.services.winfeed.contract_report.ContractSummaryItem
	3, // 4: samantra.services.winfeed.contract_report.ContractReportSummaryResponse.ContractReportSummaryList:type_name -> samantra.services.winfeed.contract_report.ContractReportSummaryItem
	0, // 5: samantra.services.winfeed.contract_report.WinfeedContract.GetSummaryByProductCodesAndDate:input_type -> samantra.services.winfeed.contract_report.GetSummaryByProductCodesAndDateRequest
	1, // 6: samantra.services.winfeed.contract_report.WinfeedContract.GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes:input_type -> samantra.services.winfeed.contract_report.GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest
	4, // 7: samantra.services.winfeed.contract_report.WinfeedContract.GetSummaryByProductCodesAndDate:output_type -> samantra.services.winfeed.contract_report.ContractReportSummaryResponse
	4, // 8: samantra.services.winfeed.contract_report.WinfeedContract.GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes:output_type -> samantra.services.winfeed.contract_report.ContractReportSummaryResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() {
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_init()
}
func file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_init() {
	if File_samantra_services_winfeed_services_contract_report_service_contract_report_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryByProductCodesAndDateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractSummaryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReportSummaryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractReportSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_goTypes,
		DependencyIndexes: file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_depIdxs,
		MessageInfos:      file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_msgTypes,
	}.Build()
	File_samantra_services_winfeed_services_contract_report_service_contract_report_proto = out.File
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_rawDesc = nil
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_goTypes = nil
	file_samantra_services_winfeed_services_contract_report_service_contract_report_proto_depIdxs = nil
}
