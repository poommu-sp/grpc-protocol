// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contract_report

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WinfeedContractClient is the client API for WinfeedContract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WinfeedContractClient interface {
	GetSummaryByProductCodesAndDate(ctx context.Context, in *GetSummaryByProductCodesAndDateRequest, opts ...grpc.CallOption) (*ContractReportSummaryResponse, error)
	GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(ctx context.Context, in *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest, opts ...grpc.CallOption) (*ContractReportSummaryResponse, error)
}

type winfeedContractClient struct {
	cc grpc.ClientConnInterface
}

func NewWinfeedContractClient(cc grpc.ClientConnInterface) WinfeedContractClient {
	return &winfeedContractClient{cc}
}

func (c *winfeedContractClient) GetSummaryByProductCodesAndDate(ctx context.Context, in *GetSummaryByProductCodesAndDateRequest, opts ...grpc.CallOption) (*ContractReportSummaryResponse, error) {
	out := new(ContractReportSummaryResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.winfeed.contract_report.WinfeedContract/GetSummaryByProductCodesAndDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *winfeedContractClient) GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(ctx context.Context, in *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest, opts ...grpc.CallOption) (*ContractReportSummaryResponse, error) {
	out := new(ContractReportSummaryResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.winfeed.contract_report.WinfeedContract/GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WinfeedContractServer is the server API for WinfeedContract service.
// All implementations must embed UnimplementedWinfeedContractServer
// for forward compatibility
type WinfeedContractServer interface {
	GetSummaryByProductCodesAndDate(context.Context, *GetSummaryByProductCodesAndDateRequest) (*ContractReportSummaryResponse, error)
	GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(context.Context, *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) (*ContractReportSummaryResponse, error)
	mustEmbedUnimplementedWinfeedContractServer()
}

// UnimplementedWinfeedContractServer must be embedded to have forward compatible implementations.
type UnimplementedWinfeedContractServer struct {
}

func (UnimplementedWinfeedContractServer) GetSummaryByProductCodesAndDate(context.Context, *GetSummaryByProductCodesAndDateRequest) (*ContractReportSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryByProductCodesAndDate not implemented")
}
func (UnimplementedWinfeedContractServer) GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(context.Context, *GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest) (*ContractReportSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes not implemented")
}
func (UnimplementedWinfeedContractServer) mustEmbedUnimplementedWinfeedContractServer() {}

// UnsafeWinfeedContractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WinfeedContractServer will
// result in compilation errors.
type UnsafeWinfeedContractServer interface {
	mustEmbedUnimplementedWinfeedContractServer()
}

func RegisterWinfeedContractServer(s grpc.ServiceRegistrar, srv WinfeedContractServer) {
	s.RegisterService(&WinfeedContract_ServiceDesc, srv)
}

func _WinfeedContract_GetSummaryByProductCodesAndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryByProductCodesAndDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinfeedContractServer).GetSummaryByProductCodesAndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.winfeed.contract_report.WinfeedContract/GetSummaryByProductCodesAndDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinfeedContractServer).GetSummaryByProductCodesAndDate(ctx, req.(*GetSummaryByProductCodesAndDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WinfeedContract_GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WinfeedContractServer).GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.winfeed.contract_report.WinfeedContract/GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WinfeedContractServer).GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes(ctx, req.(*GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WinfeedContract_ServiceDesc is the grpc.ServiceDesc for WinfeedContract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WinfeedContract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.winfeed.contract_report.WinfeedContract",
	HandlerType: (*WinfeedContractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummaryByProductCodesAndDate",
			Handler:    _WinfeedContract_GetSummaryByProductCodesAndDate_Handler,
		},
		{
			MethodName: "GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes",
			Handler:    _WinfeedContract_GetSummaryByDateAndTimeDigitStringAndProductCodesAndPlantCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/winfeed_services/contract_report_service/contract_report.proto",
}
