// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: samantra/services/master_service/winfeed_purchase_service/winfeed_purchase.proto

package winfeed_purchase

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WinfeedPurchase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string                 `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ReceivedDate    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ReceivedDate,proto3" json:"ReceivedDate,omitempty"`
	ReceivedTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=ReceivedTime,proto3" json:"ReceivedTime,omitempty"`
	PlantCode       string                 `protobuf:"bytes,4,opt,name=PlantCode,proto3" json:"PlantCode,omitempty"`
	PlantName       string                 `protobuf:"bytes,5,opt,name=PlantName,proto3" json:"PlantName,omitempty"`
	ProductGroup    string                 `protobuf:"bytes,6,opt,name=ProductGroup,proto3" json:"ProductGroup,omitempty"`
	ProductCode     string                 `protobuf:"bytes,7,opt,name=ProductCode,proto3" json:"ProductCode,omitempty"`
	VendorCode      string                 `protobuf:"bytes,8,opt,name=VendorCode,proto3" json:"VendorCode,omitempty"`
	VendorName      string                 `protobuf:"bytes,9,opt,name=VendorName,proto3" json:"VendorName,omitempty"`
	LicensePlate    string                 `protobuf:"bytes,10,opt,name=LicensePlate,proto3" json:"LicensePlate,omitempty"`
	TrailerLicense  string                 `protobuf:"bytes,11,opt,name=TrailerLicense,proto3" json:"TrailerLicense,omitempty"`
	SerialNO        float64                `protobuf:"fixed64,12,opt,name=SerialNO,proto3" json:"SerialNO,omitempty"`
	WeightNO        float64                `protobuf:"fixed64,13,opt,name=WeightNO,proto3" json:"WeightNO,omitempty"`
	GRDocNO         string                 `protobuf:"bytes,14,opt,name=GRDocNO,proto3" json:"GRDocNO,omitempty"`
	NetWeight       float64                `protobuf:"fixed64,15,opt,name=NetWeight,proto3" json:"NetWeight,omitempty"`
	PaymentWeight   float64                `protobuf:"fixed64,16,opt,name=PaymentWeight,proto3" json:"PaymentWeight,omitempty"`
	ReceiveQuantity float64                `protobuf:"fixed64,17,opt,name=ReceiveQuantity,proto3" json:"ReceiveQuantity,omitempty"`
	PackagingWeight float64                `protobuf:"fixed64,18,opt,name=PackagingWeight,proto3" json:"PackagingWeight,omitempty"`
	NetAmount       float64                `protobuf:"fixed64,19,opt,name=NetAmount,proto3" json:"NetAmount,omitempty"`
	TGRNNO          string                 `protobuf:"bytes,20,opt,name=TGRNNO,proto3" json:"TGRNNO,omitempty"`
	GRNNO           string                 `protobuf:"bytes,21,opt,name=GRNNO,proto3" json:"GRNNO,omitempty"`
	TGRNDate        *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=TGRNDate,proto3" json:"TGRNDate,omitempty"`
	ContractNO      string                 `protobuf:"bytes,23,opt,name=ContractNO,proto3" json:"ContractNO,omitempty"`
}

func (x *WinfeedPurchase) Reset() {
	*x = WinfeedPurchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedPurchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedPurchase) ProtoMessage() {}

func (x *WinfeedPurchase) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedPurchase.ProtoReflect.Descriptor instead.
func (*WinfeedPurchase) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescGZIP(), []int{0}
}

func (x *WinfeedPurchase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *WinfeedPurchase) GetReceivedDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedDate
	}
	return nil
}

func (x *WinfeedPurchase) GetReceivedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReceivedTime
	}
	return nil
}

func (x *WinfeedPurchase) GetPlantCode() string {
	if x != nil {
		return x.PlantCode
	}
	return ""
}

func (x *WinfeedPurchase) GetPlantName() string {
	if x != nil {
		return x.PlantName
	}
	return ""
}

func (x *WinfeedPurchase) GetProductGroup() string {
	if x != nil {
		return x.ProductGroup
	}
	return ""
}

func (x *WinfeedPurchase) GetProductCode() string {
	if x != nil {
		return x.ProductCode
	}
	return ""
}

func (x *WinfeedPurchase) GetVendorCode() string {
	if x != nil {
		return x.VendorCode
	}
	return ""
}

func (x *WinfeedPurchase) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *WinfeedPurchase) GetLicensePlate() string {
	if x != nil {
		return x.LicensePlate
	}
	return ""
}

func (x *WinfeedPurchase) GetTrailerLicense() string {
	if x != nil {
		return x.TrailerLicense
	}
	return ""
}

func (x *WinfeedPurchase) GetSerialNO() float64 {
	if x != nil {
		return x.SerialNO
	}
	return 0
}

func (x *WinfeedPurchase) GetWeightNO() float64 {
	if x != nil {
		return x.WeightNO
	}
	return 0
}

func (x *WinfeedPurchase) GetGRDocNO() string {
	if x != nil {
		return x.GRDocNO
	}
	return ""
}

func (x *WinfeedPurchase) GetNetWeight() float64 {
	if x != nil {
		return x.NetWeight
	}
	return 0
}

func (x *WinfeedPurchase) GetPaymentWeight() float64 {
	if x != nil {
		return x.PaymentWeight
	}
	return 0
}

func (x *WinfeedPurchase) GetReceiveQuantity() float64 {
	if x != nil {
		return x.ReceiveQuantity
	}
	return 0
}

func (x *WinfeedPurchase) GetPackagingWeight() float64 {
	if x != nil {
		return x.PackagingWeight
	}
	return 0
}

func (x *WinfeedPurchase) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *WinfeedPurchase) GetTGRNNO() string {
	if x != nil {
		return x.TGRNNO
	}
	return ""
}

func (x *WinfeedPurchase) GetGRNNO() string {
	if x != nil {
		return x.GRNNO
	}
	return ""
}

func (x *WinfeedPurchase) GetTGRNDate() *timestamppb.Timestamp {
	if x != nil {
		return x.TGRNDate
	}
	return nil
}

func (x *WinfeedPurchase) GetContractNO() string {
	if x != nil {
		return x.ContractNO
	}
	return ""
}

var File_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto protoreflect.FileDescriptor

var file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDesc = []byte{
	0x0a, 0x50, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x29, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x77, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd,
	0x06, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x69,
	0x6c, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x54, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x4f, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x4f, 0x12, 0x1a, 0x0a, 0x08,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x4f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x4e, 0x4f, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x52, 0x44, 0x6f,
	0x63, 0x4e, 0x4f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x47, 0x52, 0x44, 0x6f, 0x63,
	0x4e, 0x4f, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4e,
	0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x47, 0x52, 0x4e,
	0x4e, 0x4f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x47, 0x52, 0x4e, 0x4e, 0x4f,
	0x12, 0x14, 0x0a, 0x05, 0x47, 0x52, 0x4e, 0x4e, 0x4f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x47, 0x52, 0x4e, 0x4e, 0x4f, 0x12, 0x36, 0x0a, 0x08, 0x54, 0x47, 0x52, 0x4e, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x54, 0x47, 0x52, 0x4e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x4f, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x4f, 0x42, 0x81,
	0x01, 0x5a, 0x7f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69,
	0x74, 0x64, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x67, 0x69, 0x74, 0x2f, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x3b, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescOnce sync.Once
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescData = file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDesc
)

func file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescGZIP() []byte {
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescOnce.Do(func() {
		file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescData = protoimpl.X.CompressGZIP(file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescData)
	})
	return file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDescData
}

var file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_goTypes = []interface{}{
	(*WinfeedPurchase)(nil),       // 0: samantra.services.master.winfeed_purchase.WinfeedPurchase
	(*timestamppb.Timestamp)(nil), // 1: google.protobuf.Timestamp
}
var file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_depIdxs = []int32{
	1, // 0: samantra.services.master.winfeed_purchase.WinfeedPurchase.ReceivedDate:type_name -> google.protobuf.Timestamp
	1, // 1: samantra.services.master.winfeed_purchase.WinfeedPurchase.ReceivedTime:type_name -> google.protobuf.Timestamp
	1, // 2: samantra.services.master.winfeed_purchase.WinfeedPurchase.TGRNDate:type_name -> google.protobuf.Timestamp
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() {
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_init()
}
func file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_init() {
	if File_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedPurchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_goTypes,
		DependencyIndexes: file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_depIdxs,
		MessageInfos:      file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_msgTypes,
	}.Build()
	File_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto = out.File
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_rawDesc = nil
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_goTypes = nil
	file_samantra_services_master_service_winfeed_purchase_service_winfeed_purchase_proto_depIdxs = nil
}
