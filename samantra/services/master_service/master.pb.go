// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: samantra/services/master_service/master.proto

package master

import (
	winfeed_daily_price_service "gitlab.com/fitdigital/digitization/grpc-protocol.git/samantra/services/master_service/winfeed_daily_price_service"
	winfeed_purchase_service "gitlab.com/fitdigital/digitization/grpc-protocol.git/samantra/services/master_service/winfeed_purchase_service"
	winfeed_stock_service "gitlab.com/fitdigital/digitization/grpc-protocol.git/samantra/services/master_service/winfeed_stock_service"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{0}
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	UserName         string `protobuf:"bytes,2,opt,name=UserName,proto3" json:"UserName,omitempty"`
	Email            string `protobuf:"bytes,3,opt,name=Email,proto3" json:"Email,omitempty"`
	FullName         string `protobuf:"bytes,4,opt,name=FullName,proto3" json:"FullName,omitempty"`
	IsActive         string `protobuf:"bytes,5,opt,name=IsActive,proto3" json:"IsActive,omitempty"`
	CreatedTimestamp int64  `protobuf:"varint,6,opt,name=CreatedTimestamp,proto3" json:"CreatedTimestamp,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *User) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *User) GetIsActive() string {
	if x != nil {
		return x.IsActive
	}
	return ""
}

func (x *User) GetCreatedTimestamp() int64 {
	if x != nil {
		return x.CreatedTimestamp
	}
	return 0
}

type UsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*User `protobuf:"bytes,1,rep,name=Users,proto3" json:"Users,omitempty"`
}

func (x *UsersResponse) Reset() {
	*x = UsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersResponse) ProtoMessage() {}

func (x *UsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersResponse.ProtoReflect.Descriptor instead.
func (*UsersResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{2}
}

func (x *UsersResponse) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

type ProductCodesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProductCodes []string `protobuf:"bytes,1,rep,name=ProductCodes,proto3" json:"ProductCodes,omitempty"`
}

func (x *ProductCodesResponse) Reset() {
	*x = ProductCodesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductCodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductCodesResponse) ProtoMessage() {}

func (x *ProductCodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductCodesResponse.ProtoReflect.Descriptor instead.
func (*ProductCodesResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{3}
}

func (x *ProductCodesResponse) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

type WinfeedProductReportNamesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedProductReportNames []string `protobuf:"bytes,1,rep,name=WinfeedProductReportNames,proto3" json:"WinfeedProductReportNames,omitempty"`
}

func (x *WinfeedProductReportNamesResponse) Reset() {
	*x = WinfeedProductReportNamesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductReportNamesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductReportNamesResponse) ProtoMessage() {}

func (x *WinfeedProductReportNamesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductReportNamesResponse.ProtoReflect.Descriptor instead.
func (*WinfeedProductReportNamesResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{4}
}

func (x *WinfeedProductReportNamesResponse) GetWinfeedProductReportNames() []string {
	if x != nil {
		return x.WinfeedProductReportNames
	}
	return nil
}

type WinfeedProductReportName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WinfeedProductReportName) Reset() {
	*x = WinfeedProductReportName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductReportName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductReportName) ProtoMessage() {}

func (x *WinfeedProductReportName) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductReportName.ProtoReflect.Descriptor instead.
func (*WinfeedProductReportName) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{5}
}

func (x *WinfeedProductReportName) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type WinfeedProductReportIDsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []int64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *WinfeedProductReportIDsResponse) Reset() {
	*x = WinfeedProductReportIDsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductReportIDsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductReportIDsResponse) ProtoMessage() {}

func (x *WinfeedProductReportIDsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductReportIDsResponse.ProtoReflect.Descriptor instead.
func (*WinfeedProductReportIDsResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{6}
}

func (x *WinfeedProductReportIDsResponse) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type WinfeedProductReportID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message int64 `protobuf:"varint,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *WinfeedProductReportID) Reset() {
	*x = WinfeedProductReportID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductReportID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductReportID) ProtoMessage() {}

func (x *WinfeedProductReportID) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductReportID.ProtoReflect.Descriptor instead.
func (*WinfeedProductReportID) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{7}
}

func (x *WinfeedProductReportID) GetMessage() int64 {
	if x != nil {
		return x.Message
	}
	return 0
}

type Plant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NameEn           string `protobuf:"bytes,2,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameTh           string `protobuf:"bytes,3,opt,name=name_th,json=nameTh,proto3" json:"name_th,omitempty"`
	NameShortEn      string `protobuf:"bytes,4,opt,name=name_short_en,json=nameShortEn,proto3" json:"name_short_en,omitempty"`
	OrgCode          string `protobuf:"bytes,5,opt,name=org_code,json=orgCode,proto3" json:"org_code,omitempty"`
	CountryAlpha3    string `protobuf:"bytes,6,opt,name=country_alpha3,json=countryAlpha3,proto3" json:"country_alpha3,omitempty"`
	NameShortTh      string `protobuf:"bytes,7,opt,name=name_short_th,json=nameShortTh,proto3" json:"name_short_th,omitempty"`
	CompanyNameTh    string `protobuf:"bytes,8,opt,name=company_name_th,json=companyNameTh,proto3" json:"company_name_th,omitempty"`
	CompanyNameEn    string `protobuf:"bytes,9,opt,name=company_name_en,json=companyNameEn,proto3" json:"company_name_en,omitempty"`
	Priority         string `protobuf:"bytes,10,opt,name=priority,proto3" json:"priority,omitempty"`
	SapCode          string `protobuf:"bytes,11,opt,name=sap_code,json=sapCode,proto3" json:"sap_code,omitempty"`
	OrgAccBkp        string `protobuf:"bytes,12,opt,name=org_acc_bkp,json=orgAccBkp,proto3" json:"org_acc_bkp,omitempty"`
	FeedmillTypeId   int64  `protobuf:"varint,13,opt,name=feedmill_type_id,json=feedmillTypeId,proto3" json:"feedmill_type_id,omitempty"`
	Rm2OperationCode string `protobuf:"bytes,14,opt,name=rm2_operation_code,json=rm2OperationCode,proto3" json:"rm2_operation_code,omitempty"`
	Rm2Code          string `protobuf:"bytes,15,opt,name=rm2_code,json=rm2Code,proto3" json:"rm2_code,omitempty"`
	OsPriority       string `protobuf:"bytes,16,opt,name=os_priority,json=osPriority,proto3" json:"os_priority,omitempty"`
}

func (x *Plant) Reset() {
	*x = Plant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plant) ProtoMessage() {}

func (x *Plant) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plant.ProtoReflect.Descriptor instead.
func (*Plant) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{8}
}

func (x *Plant) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Plant) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *Plant) GetNameTh() string {
	if x != nil {
		return x.NameTh
	}
	return ""
}

func (x *Plant) GetNameShortEn() string {
	if x != nil {
		return x.NameShortEn
	}
	return ""
}

func (x *Plant) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *Plant) GetCountryAlpha3() string {
	if x != nil {
		return x.CountryAlpha3
	}
	return ""
}

func (x *Plant) GetNameShortTh() string {
	if x != nil {
		return x.NameShortTh
	}
	return ""
}

func (x *Plant) GetCompanyNameTh() string {
	if x != nil {
		return x.CompanyNameTh
	}
	return ""
}

func (x *Plant) GetCompanyNameEn() string {
	if x != nil {
		return x.CompanyNameEn
	}
	return ""
}

func (x *Plant) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *Plant) GetSapCode() string {
	if x != nil {
		return x.SapCode
	}
	return ""
}

func (x *Plant) GetOrgAccBkp() string {
	if x != nil {
		return x.OrgAccBkp
	}
	return ""
}

func (x *Plant) GetFeedmillTypeId() int64 {
	if x != nil {
		return x.FeedmillTypeId
	}
	return 0
}

func (x *Plant) GetRm2OperationCode() string {
	if x != nil {
		return x.Rm2OperationCode
	}
	return ""
}

func (x *Plant) GetRm2Code() string {
	if x != nil {
		return x.Rm2Code
	}
	return ""
}

func (x *Plant) GetOsPriority() string {
	if x != nil {
		return x.OsPriority
	}
	return ""
}

type PlantsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plants []*Plant `protobuf:"bytes,1,rep,name=plants,proto3" json:"plants,omitempty"`
}

func (x *PlantsResponse) Reset() {
	*x = PlantsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantsResponse) ProtoMessage() {}

func (x *PlantsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantsResponse.ProtoReflect.Descriptor instead.
func (*PlantsResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{9}
}

func (x *PlantsResponse) GetPlants() []*Plant {
	if x != nil {
		return x.Plants
	}
	return nil
}

type Org struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	PlantId       int64  `protobuf:"varint,2,opt,name=plant_id,json=plantId,proto3" json:"plant_id,omitempty"`
	NameEn        string `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameTh        string `protobuf:"bytes,4,opt,name=name_th,json=nameTh,proto3" json:"name_th,omitempty"`
	NameShortEn   string `protobuf:"bytes,5,opt,name=name_short_en,json=nameShortEn,proto3" json:"name_short_en,omitempty"`
	OrgCode       string `protobuf:"bytes,6,opt,name=org_code,json=orgCode,proto3" json:"org_code,omitempty"`
	CountryAlpha3 string `protobuf:"bytes,7,opt,name=country_alpha3,json=countryAlpha3,proto3" json:"country_alpha3,omitempty"`
	NameShortTh   string `protobuf:"bytes,8,opt,name=name_short_th,json=nameShortTh,proto3" json:"name_short_th,omitempty"`
	CompanyNameTh string `protobuf:"bytes,9,opt,name=company_name_th,json=companyNameTh,proto3" json:"company_name_th,omitempty"`
	CompanyNameEn string `protobuf:"bytes,10,opt,name=company_name_en,json=companyNameEn,proto3" json:"company_name_en,omitempty"`
	Priority      string `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	SapCode       string `protobuf:"bytes,12,opt,name=sap_code,json=sapCode,proto3" json:"sap_code,omitempty"`
	OrgAccBkp     string `protobuf:"bytes,13,opt,name=org_acc_bkp,json=orgAccBkp,proto3" json:"org_acc_bkp,omitempty"`
}

func (x *Org) Reset() {
	*x = Org{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Org) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Org) ProtoMessage() {}

func (x *Org) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Org.ProtoReflect.Descriptor instead.
func (*Org) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{10}
}

func (x *Org) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Org) GetPlantId() int64 {
	if x != nil {
		return x.PlantId
	}
	return 0
}

func (x *Org) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *Org) GetNameTh() string {
	if x != nil {
		return x.NameTh
	}
	return ""
}

func (x *Org) GetNameShortEn() string {
	if x != nil {
		return x.NameShortEn
	}
	return ""
}

func (x *Org) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *Org) GetCountryAlpha3() string {
	if x != nil {
		return x.CountryAlpha3
	}
	return ""
}

func (x *Org) GetNameShortTh() string {
	if x != nil {
		return x.NameShortTh
	}
	return ""
}

func (x *Org) GetCompanyNameTh() string {
	if x != nil {
		return x.CompanyNameTh
	}
	return ""
}

func (x *Org) GetCompanyNameEn() string {
	if x != nil {
		return x.CompanyNameEn
	}
	return ""
}

func (x *Org) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *Org) GetSapCode() string {
	if x != nil {
		return x.SapCode
	}
	return ""
}

func (x *Org) GetOrgAccBkp() string {
	if x != nil {
		return x.OrgAccBkp
	}
	return ""
}

type OrgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Orgs []*Org `protobuf:"bytes,1,rep,name=orgs,proto3" json:"orgs,omitempty"`
}

func (x *OrgsResponse) Reset() {
	*x = OrgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgsResponse) ProtoMessage() {}

func (x *OrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgsResponse.ProtoReflect.Descriptor instead.
func (*OrgsResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{11}
}

func (x *OrgsResponse) GetOrgs() []*Org {
	if x != nil {
		return x.Orgs
	}
	return nil
}

type SubOrg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId         int64  `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	NameEn        string `protobuf:"bytes,3,opt,name=name_en,json=nameEn,proto3" json:"name_en,omitempty"`
	NameTh        string `protobuf:"bytes,4,opt,name=name_th,json=nameTh,proto3" json:"name_th,omitempty"`
	NameShortEn   string `protobuf:"bytes,5,opt,name=name_short_en,json=nameShortEn,proto3" json:"name_short_en,omitempty"`
	OrgCode       string `protobuf:"bytes,6,opt,name=org_code,json=orgCode,proto3" json:"org_code,omitempty"`
	CountryAlpha3 string `protobuf:"bytes,7,opt,name=country_alpha3,json=countryAlpha3,proto3" json:"country_alpha3,omitempty"`
	NameShortTh   string `protobuf:"bytes,8,opt,name=name_short_th,json=nameShortTh,proto3" json:"name_short_th,omitempty"`
	CompanyNameTh string `protobuf:"bytes,9,opt,name=company_name_th,json=companyNameTh,proto3" json:"company_name_th,omitempty"`
	CompanyNameEn string `protobuf:"bytes,10,opt,name=company_name_en,json=companyNameEn,proto3" json:"company_name_en,omitempty"`
	Priority      string `protobuf:"bytes,11,opt,name=priority,proto3" json:"priority,omitempty"`
	SapCode       string `protobuf:"bytes,12,opt,name=sap_code,json=sapCode,proto3" json:"sap_code,omitempty"`
	OrgAccBkp     string `protobuf:"bytes,13,opt,name=org_acc_bkp,json=orgAccBkp,proto3" json:"org_acc_bkp,omitempty"`
}

func (x *SubOrg) Reset() {
	*x = SubOrg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrg) ProtoMessage() {}

func (x *SubOrg) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrg.ProtoReflect.Descriptor instead.
func (*SubOrg) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{12}
}

func (x *SubOrg) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SubOrg) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *SubOrg) GetNameEn() string {
	if x != nil {
		return x.NameEn
	}
	return ""
}

func (x *SubOrg) GetNameTh() string {
	if x != nil {
		return x.NameTh
	}
	return ""
}

func (x *SubOrg) GetNameShortEn() string {
	if x != nil {
		return x.NameShortEn
	}
	return ""
}

func (x *SubOrg) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *SubOrg) GetCountryAlpha3() string {
	if x != nil {
		return x.CountryAlpha3
	}
	return ""
}

func (x *SubOrg) GetNameShortTh() string {
	if x != nil {
		return x.NameShortTh
	}
	return ""
}

func (x *SubOrg) GetCompanyNameTh() string {
	if x != nil {
		return x.CompanyNameTh
	}
	return ""
}

func (x *SubOrg) GetCompanyNameEn() string {
	if x != nil {
		return x.CompanyNameEn
	}
	return ""
}

func (x *SubOrg) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *SubOrg) GetSapCode() string {
	if x != nil {
		return x.SapCode
	}
	return ""
}

func (x *SubOrg) GetOrgAccBkp() string {
	if x != nil {
		return x.OrgAccBkp
	}
	return ""
}

type SubOrgsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubOrgs []*SubOrg `protobuf:"bytes,1,rep,name=subOrgs,proto3" json:"subOrgs,omitempty"`
}

func (x *SubOrgsResponse) Reset() {
	*x = SubOrgsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubOrgsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubOrgsResponse) ProtoMessage() {}

func (x *SubOrgsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubOrgsResponse.ProtoReflect.Descriptor instead.
func (*SubOrgsResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{13}
}

func (x *SubOrgsResponse) GetSubOrgs() []*SubOrg {
	if x != nil {
		return x.SubOrgs
	}
	return nil
}

type GetWinfeedProductComponentsWithSubIDsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message []int64 `protobuf:"varint,1,rep,packed,name=message,proto3" json:"message,omitempty"`
}

func (x *GetWinfeedProductComponentsWithSubIDsRequest) Reset() {
	*x = GetWinfeedProductComponentsWithSubIDsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinfeedProductComponentsWithSubIDsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinfeedProductComponentsWithSubIDsRequest) ProtoMessage() {}

func (x *GetWinfeedProductComponentsWithSubIDsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinfeedProductComponentsWithSubIDsRequest.ProtoReflect.Descriptor instead.
func (*GetWinfeedProductComponentsWithSubIDsRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{14}
}

func (x *GetWinfeedProductComponentsWithSubIDsRequest) GetMessage() []int64 {
	if x != nil {
		return x.Message
	}
	return nil
}

type WinfeedProductComponentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedProductComponents []*WinfeedProductComponent `protobuf:"bytes,1,rep,name=WinfeedProductComponents,proto3" json:"WinfeedProductComponents,omitempty"`
}

func (x *WinfeedProductComponentsResponse) Reset() {
	*x = WinfeedProductComponentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductComponentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductComponentsResponse) ProtoMessage() {}

func (x *WinfeedProductComponentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductComponentsResponse.ProtoReflect.Descriptor instead.
func (*WinfeedProductComponentsResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{15}
}

func (x *WinfeedProductComponentsResponse) GetWinfeedProductComponents() []*WinfeedProductComponent {
	if x != nil {
		return x.WinfeedProductComponents
	}
	return nil
}

type WinfeedProductComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                                int64                         `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name                              string                        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	WinfeedSubProductReportComponents []*WinfeedSubProductComponent `protobuf:"bytes,3,rep,name=WinfeedSubProductReportComponents,proto3" json:"WinfeedSubProductReportComponents,omitempty"`
}

func (x *WinfeedProductComponent) Reset() {
	*x = WinfeedProductComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProductComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProductComponent) ProtoMessage() {}

func (x *WinfeedProductComponent) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProductComponent.ProtoReflect.Descriptor instead.
func (*WinfeedProductComponent) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{16}
}

func (x *WinfeedProductComponent) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WinfeedProductComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinfeedProductComponent) GetWinfeedSubProductReportComponents() []*WinfeedSubProductComponent {
	if x != nil {
		return x.WinfeedSubProductReportComponents
	}
	return nil
}

type WinfeedSubProductComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     int64             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	WinfeedProductReportID int64             `protobuf:"varint,2,opt,name=WinfeedProductReportID,proto3" json:"WinfeedProductReportID,omitempty"`
	Name                   string            `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	WinfeedProducts        []*WinfeedProduct `protobuf:"bytes,4,rep,name=WinfeedProducts,proto3" json:"WinfeedProducts,omitempty"`
}

func (x *WinfeedSubProductComponent) Reset() {
	*x = WinfeedSubProductComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedSubProductComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedSubProductComponent) ProtoMessage() {}

func (x *WinfeedSubProductComponent) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedSubProductComponent.ProtoReflect.Descriptor instead.
func (*WinfeedSubProductComponent) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{17}
}

func (x *WinfeedSubProductComponent) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WinfeedSubProductComponent) GetWinfeedProductReportID() int64 {
	if x != nil {
		return x.WinfeedProductReportID
	}
	return 0
}

func (x *WinfeedSubProductComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinfeedSubProductComponent) GetWinfeedProducts() []*WinfeedProduct {
	if x != nil {
		return x.WinfeedProducts
	}
	return nil
}

type WinfeedProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int64  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	NameEN    string `protobuf:"bytes,2,opt,name=NameEN,proto3" json:"NameEN,omitempty"`
	NameTH    string `protobuf:"bytes,3,opt,name=NameTH,proto3" json:"NameTH,omitempty"`
	Origin    string `protobuf:"bytes,4,opt,name=Origin,proto3" json:"Origin,omitempty"`
	Code      string `protobuf:"bytes,5,opt,name=Code,proto3" json:"Code,omitempty"`
	GroupID   int64  `protobuf:"varint,6,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	PackageID int64  `protobuf:"varint,7,opt,name=PackageID,proto3" json:"PackageID,omitempty"`
}

func (x *WinfeedProduct) Reset() {
	*x = WinfeedProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedProduct) ProtoMessage() {}

func (x *WinfeedProduct) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedProduct.ProtoReflect.Descriptor instead.
func (*WinfeedProduct) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{18}
}

func (x *WinfeedProduct) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *WinfeedProduct) GetNameEN() string {
	if x != nil {
		return x.NameEN
	}
	return ""
}

func (x *WinfeedProduct) GetNameTH() string {
	if x != nil {
		return x.NameTH
	}
	return ""
}

func (x *WinfeedProduct) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *WinfeedProduct) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *WinfeedProduct) GetGroupID() int64 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *WinfeedProduct) GetPackageID() int64 {
	if x != nil {
		return x.PackageID
	}
	return 0
}

type GetWinfeedDivisionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetWinfeedDivisionRequest) Reset() {
	*x = GetWinfeedDivisionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinfeedDivisionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinfeedDivisionRequest) ProtoMessage() {}

func (x *GetWinfeedDivisionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinfeedDivisionRequest.ProtoReflect.Descriptor instead.
func (*GetWinfeedDivisionRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{19}
}

func (x *GetWinfeedDivisionRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetWinfeedDivisionListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedDivisionList []*WinfeedDivision `protobuf:"bytes,1,rep,name=WinfeedDivisionList,proto3" json:"WinfeedDivisionList,omitempty"`
}

func (x *GetWinfeedDivisionListResponse) Reset() {
	*x = GetWinfeedDivisionListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinfeedDivisionListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinfeedDivisionListResponse) ProtoMessage() {}

func (x *GetWinfeedDivisionListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinfeedDivisionListResponse.ProtoReflect.Descriptor instead.
func (*GetWinfeedDivisionListResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{20}
}

func (x *GetWinfeedDivisionListResponse) GetWinfeedDivisionList() []*WinfeedDivision {
	if x != nil {
		return x.WinfeedDivisionList
	}
	return nil
}

type GetWinfeedDivisionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedDivision *WinfeedDivision `protobuf:"bytes,1,opt,name=winfeed_division,json=winfeedDivision,proto3" json:"winfeed_division,omitempty"`
}

func (x *GetWinfeedDivisionResponse) Reset() {
	*x = GetWinfeedDivisionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinfeedDivisionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinfeedDivisionResponse) ProtoMessage() {}

func (x *GetWinfeedDivisionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinfeedDivisionResponse.ProtoReflect.Descriptor instead.
func (*GetWinfeedDivisionResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{21}
}

func (x *GetWinfeedDivisionResponse) GetWinfeedDivision() *WinfeedDivision {
	if x != nil {
		return x.WinfeedDivision
	}
	return nil
}

type WinfeedDivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CountryAlpha_3 string `protobuf:"bytes,3,opt,name=country_alpha_3,json=countryAlpha3,proto3" json:"country_alpha_3,omitempty"`
	CountryName    string `protobuf:"bytes,4,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	Code           string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *WinfeedDivision) Reset() {
	*x = WinfeedDivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedDivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedDivision) ProtoMessage() {}

func (x *WinfeedDivision) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedDivision.ProtoReflect.Descriptor instead.
func (*WinfeedDivision) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{22}
}

func (x *WinfeedDivision) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinfeedDivision) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WinfeedDivision) GetCountryAlpha_3() string {
	if x != nil {
		return x.CountryAlpha_3
	}
	return ""
}

func (x *WinfeedDivision) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *WinfeedDivision) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type ListWinfeedProductByDivisionIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListWinfeedProductByDivisionIDRequest) Reset() {
	*x = ListWinfeedProductByDivisionIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedProductByDivisionIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedProductByDivisionIDRequest) ProtoMessage() {}

func (x *ListWinfeedProductByDivisionIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedProductByDivisionIDRequest.ProtoReflect.Descriptor instead.
func (*ListWinfeedProductByDivisionIDRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{23}
}

func (x *ListWinfeedProductByDivisionIDRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListWinfeedProductByDivisionIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedProductList []*WinfeedProduct `protobuf:"bytes,1,rep,name=winfeed_product_list,json=winfeedProductList,proto3" json:"winfeed_product_list,omitempty"`
}

func (x *ListWinfeedProductByDivisionIDResponse) Reset() {
	*x = ListWinfeedProductByDivisionIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedProductByDivisionIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedProductByDivisionIDResponse) ProtoMessage() {}

func (x *ListWinfeedProductByDivisionIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedProductByDivisionIDResponse.ProtoReflect.Descriptor instead.
func (*ListWinfeedProductByDivisionIDResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{24}
}

func (x *ListWinfeedProductByDivisionIDResponse) GetWinfeedProductList() []*WinfeedProduct {
	if x != nil {
		return x.WinfeedProductList
	}
	return nil
}

type ListWinfeedStockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ProductCodes []string               `protobuf:"bytes,3,rep,name=productCodes,proto3" json:"productCodes,omitempty"`
	OrgCode      string                 `protobuf:"bytes,4,opt,name=orgCode,proto3" json:"orgCode,omitempty"`
	TwoDigitTime string                 `protobuf:"bytes,5,opt,name=twoDigitTime,proto3" json:"twoDigitTime,omitempty"`
}

func (x *ListWinfeedStockRequest) Reset() {
	*x = ListWinfeedStockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedStockRequest) ProtoMessage() {}

func (x *ListWinfeedStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedStockRequest.ProtoReflect.Descriptor instead.
func (*ListWinfeedStockRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{25}
}

func (x *ListWinfeedStockRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListWinfeedStockRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListWinfeedStockRequest) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

func (x *ListWinfeedStockRequest) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

func (x *ListWinfeedStockRequest) GetTwoDigitTime() string {
	if x != nil {
		return x.TwoDigitTime
	}
	return ""
}

type ListWinfeedStockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListWinfeedStock []*winfeed_stock_service.WinfeedStock `protobuf:"bytes,1,rep,name=listWinfeedStock,proto3" json:"listWinfeedStock,omitempty"`
}

func (x *ListWinfeedStockResponse) Reset() {
	*x = ListWinfeedStockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedStockResponse) ProtoMessage() {}

func (x *ListWinfeedStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedStockResponse.ProtoReflect.Descriptor instead.
func (*ListWinfeedStockResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{26}
}

func (x *ListWinfeedStockResponse) GetListWinfeedStock() []*winfeed_stock_service.WinfeedStock {
	if x != nil {
		return x.ListWinfeedStock
	}
	return nil
}

type ListWinfeedPurchaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate        *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ProductCodes   []string               `protobuf:"bytes,3,rep,name=productCodes,proto3" json:"productCodes,omitempty"`
	DivisionId     int64                  `protobuf:"varint,4,opt,name=divisionId,proto3" json:"divisionId,omitempty"`
	TwoDigitTime   string                 `protobuf:"bytes,5,opt,name=twoDigitTime,proto3" json:"twoDigitTime,omitempty"`
	PlantCode      string                 `protobuf:"bytes,6,opt,name=plantCode,proto3" json:"plantCode,omitempty"`
	ThreeDigitTime string                 `protobuf:"bytes,7,opt,name=threeDigitTime,proto3" json:"threeDigitTime,omitempty"`
}

func (x *ListWinfeedPurchaseRequest) Reset() {
	*x = ListWinfeedPurchaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedPurchaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedPurchaseRequest) ProtoMessage() {}

func (x *ListWinfeedPurchaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedPurchaseRequest.ProtoReflect.Descriptor instead.
func (*ListWinfeedPurchaseRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{27}
}

func (x *ListWinfeedPurchaseRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListWinfeedPurchaseRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListWinfeedPurchaseRequest) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

func (x *ListWinfeedPurchaseRequest) GetDivisionId() int64 {
	if x != nil {
		return x.DivisionId
	}
	return 0
}

func (x *ListWinfeedPurchaseRequest) GetTwoDigitTime() string {
	if x != nil {
		return x.TwoDigitTime
	}
	return ""
}

func (x *ListWinfeedPurchaseRequest) GetPlantCode() string {
	if x != nil {
		return x.PlantCode
	}
	return ""
}

func (x *ListWinfeedPurchaseRequest) GetThreeDigitTime() string {
	if x != nil {
		return x.ThreeDigitTime
	}
	return ""
}

type ListWinfeedPurchaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListWinfeedPurchase []*winfeed_purchase_service.WinfeedPurchase `protobuf:"bytes,1,rep,name=listWinfeedPurchase,proto3" json:"listWinfeedPurchase,omitempty"`
}

func (x *ListWinfeedPurchaseResponse) Reset() {
	*x = ListWinfeedPurchaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedPurchaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedPurchaseResponse) ProtoMessage() {}

func (x *ListWinfeedPurchaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedPurchaseResponse.ProtoReflect.Descriptor instead.
func (*ListWinfeedPurchaseResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{28}
}

func (x *ListWinfeedPurchaseResponse) GetListWinfeedPurchase() []*winfeed_purchase_service.WinfeedPurchase {
	if x != nil {
		return x.ListWinfeedPurchase
	}
	return nil
}

type ListWinfeedDailyPriceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartDate    *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=endDate,proto3" json:"endDate,omitempty"`
	ProductCodes []string               `protobuf:"bytes,3,rep,name=productCodes,proto3" json:"productCodes,omitempty"`
	OrgCode      string                 `protobuf:"bytes,4,opt,name=orgCode,proto3" json:"orgCode,omitempty"`
}

func (x *ListWinfeedDailyPriceRequest) Reset() {
	*x = ListWinfeedDailyPriceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedDailyPriceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedDailyPriceRequest) ProtoMessage() {}

func (x *ListWinfeedDailyPriceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedDailyPriceRequest.ProtoReflect.Descriptor instead.
func (*ListWinfeedDailyPriceRequest) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{29}
}

func (x *ListWinfeedDailyPriceRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListWinfeedDailyPriceRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListWinfeedDailyPriceRequest) GetProductCodes() []string {
	if x != nil {
		return x.ProductCodes
	}
	return nil
}

func (x *ListWinfeedDailyPriceRequest) GetOrgCode() string {
	if x != nil {
		return x.OrgCode
	}
	return ""
}

type ListWinfeedDailyPriceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ListWinfeedDailyPrice []*winfeed_daily_price_service.WinfeedDailyPrice `protobuf:"bytes,1,rep,name=listWinfeedDailyPrice,proto3" json:"listWinfeedDailyPrice,omitempty"`
}

func (x *ListWinfeedDailyPriceResponse) Reset() {
	*x = ListWinfeedDailyPriceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWinfeedDailyPriceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWinfeedDailyPriceResponse) ProtoMessage() {}

func (x *ListWinfeedDailyPriceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWinfeedDailyPriceResponse.ProtoReflect.Descriptor instead.
func (*ListWinfeedDailyPriceResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{30}
}

func (x *ListWinfeedDailyPriceResponse) GetListWinfeedDailyPrice() []*winfeed_daily_price_service.WinfeedDailyPrice {
	if x != nil {
		return x.ListWinfeedDailyPrice
	}
	return nil
}

type WinfeedGrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *WinfeedGrade) Reset() {
	*x = WinfeedGrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinfeedGrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinfeedGrade) ProtoMessage() {}

func (x *WinfeedGrade) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinfeedGrade.ProtoReflect.Descriptor instead.
func (*WinfeedGrade) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{31}
}

func (x *WinfeedGrade) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WinfeedGrade) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetWinfeedGradeListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinfeedGradeList []*WinfeedGrade `protobuf:"bytes,1,rep,name=WinfeedGradeList,proto3" json:"WinfeedGradeList,omitempty"`
}

func (x *GetWinfeedGradeListResponse) Reset() {
	*x = GetWinfeedGradeListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_samantra_services_master_service_master_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWinfeedGradeListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWinfeedGradeListResponse) ProtoMessage() {}

func (x *GetWinfeedGradeListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_samantra_services_master_service_master_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWinfeedGradeListResponse.ProtoReflect.Descriptor instead.
func (*GetWinfeedGradeListResponse) Descriptor() ([]byte, []int) {
	return file_samantra_services_master_service_master_proto_rawDescGZIP(), []int{32}
}

func (x *GetWinfeedGradeListResponse) GetWinfeedGradeList() []*WinfeedGrade {
	if x != nil {
		return x.WinfeedGradeList
	}
	return nil
}

var File_samantra_services_master_service_master_proto protoreflect.FileDescriptor

var file_samantra_services_master_service_master_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x4a, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x50, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x56, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0xac, 0x01, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x49, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x45, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x3a, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x21, 0x57,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x19, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x19, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x34,
	0x0a, 0x18, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x1f, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x16, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8e, 0x04,
	0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x12,
	0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x54, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72,
	0x67, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x62, 0x6b, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6f, 0x72, 0x67, 0x41, 0x63, 0x63, 0x42, 0x6b, 0x70, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65,
	0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x65, 0x65, 0x64, 0x6d, 0x69, 0x6c, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6d, 0x32, 0x5f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x72, 0x6d, 0x32, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6d, 0x32, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x6d, 0x32, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6f, 0x73, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x22, 0x49,
	0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x93, 0x03, 0x0a, 0x03, 0x4f, 0x72,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x12, 0x22,
	0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x45, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6c,
	0x70, 0x68, 0x61, 0x33, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f,
	0x72, 0x74, 0x5f, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x61, 0x63, 0x63, 0x5f, 0x62, 0x6b, 0x70, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x67, 0x41, 0x63, 0x63, 0x42, 0x6b, 0x70, 0x22,
	0x41, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x04, 0x6f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67, 0x52, 0x04, 0x6f, 0x72,
	0x67, 0x73, 0x22, 0x92, 0x03, 0x0a, 0x06, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f,
	0x72, 0x67, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x6e, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73,
	0x68, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x12, 0x22, 0x0a, 0x0d,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x68, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x54, 0x68,
	0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x68, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x45, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x61, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x61, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6f, 0x72, 0x67, 0x5f, 0x61,
	0x63, 0x63, 0x5f, 0x62, 0x6b, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72,
	0x67, 0x41, 0x63, 0x63, 0x42, 0x6b, 0x70, 0x22, 0x4d, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x4f, 0x72,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x4f, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x52, 0x07, 0x73,
	0x75, 0x62, 0x4f, 0x72, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x2c, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x91, 0x01, 0x0a, 0x20, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x18, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xc2, 0x01, 0x0a, 0x17, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x82, 0x01, 0x0a, 0x21, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x21, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53,
	0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x1a, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x75, 0x62, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x0f, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x61, 0x6d, 0x65, 0x45, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d,
	0x65, 0x45, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x48, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x48, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x44, 0x22,
	0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x13, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x72, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x10, 0x77, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x5f, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x94, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x33, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x25, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x44, 0x69,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x84, 0x01, 0x0a, 0x26, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x77, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x12, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xeb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x44, 0x69, 0x67, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x77, 0x6f, 0x44, 0x69, 0x67, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x60, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x73, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x52, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x22, 0xba, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65,
	0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x77, 0x6f, 0x44, 0x69, 0x67, 0x69,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x77, 0x6f,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x65,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x74, 0x68, 0x72, 0x65, 0x65, 0x44, 0x69, 0x67, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x8b, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6c, 0x0a, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73,
	0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x5f,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x13, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x22, 0xcc, 0x01,
	0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x96, 0x01, 0x0a,
	0x1d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75,
	0x0a, 0x15, 0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x77, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x15,
	0x6c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x32, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x10, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x47, 0x72, 0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x32, 0x8d, 0x15, 0x0a,
	0x06, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x27, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x2e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x3b, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x44,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x39, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x49, 0x44, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01,
	0x0a, 0x2b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x73, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0x2e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x57, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49,
	0x44, 0x12, 0x30, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x49, 0x44, 0x1a, 0x2e, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x28, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73, 0x41, 0x67, 0x72, 0x6f, 0x12, 0x1f, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x28,
	0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x73, 0x41, 0x67, 0x72, 0x6f, 0x12,
	0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29, 0x2e, 0x73, 0x61, 0x6d, 0x61,
	0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x49, 0x44, 0x73,
	0x12, 0x46, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57,
	0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68, 0x53, 0x75, 0x62, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x38, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01,
	0x0a, 0x24, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x68, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x38, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x2e, 0x73, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x34, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69,
	0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79,
	0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3f, 0x2e, 0x73, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x73, 0x61,
	0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7b, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x31, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72,
	0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x34, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x73, 0x61, 0x6d,
	0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65,
	0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66,
	0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x36, 0x2e,
	0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e,
	0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x6f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x35, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x47, 0x72,
	0x61, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74,
	0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x40, 0x2e, 0x73, 0x61, 0x6d, 0x61, 0x6e,
	0x74, 0x72, 0x61, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x6e, 0x66, 0x65, 0x65, 0x64, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x42, 0x79, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5e, 0x5a, 0x5c,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x69, 0x74, 0x64, 0x69,
	0x67, 0x69, 0x74, 0x61, 0x6c, 0x2f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x67, 0x69, 0x74, 0x2f, 0x73, 0x61, 0x6d, 0x61, 0x6e, 0x74, 0x72, 0x61, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_samantra_services_master_service_master_proto_rawDescOnce sync.Once
	file_samantra_services_master_service_master_proto_rawDescData = file_samantra_services_master_service_master_proto_rawDesc
)

func file_samantra_services_master_service_master_proto_rawDescGZIP() []byte {
	file_samantra_services_master_service_master_proto_rawDescOnce.Do(func() {
		file_samantra_services_master_service_master_proto_rawDescData = protoimpl.X.CompressGZIP(file_samantra_services_master_service_master_proto_rawDescData)
	})
	return file_samantra_services_master_service_master_proto_rawDescData
}

var file_samantra_services_master_service_master_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_samantra_services_master_service_master_proto_goTypes = []interface{}{
	(*Empty)(nil),                                         // 0: samantra.services.master.Empty
	(*User)(nil),                                          // 1: samantra.services.master.User
	(*UsersResponse)(nil),                                 // 2: samantra.services.master.UsersResponse
	(*ProductCodesResponse)(nil),                          // 3: samantra.services.master.ProductCodesResponse
	(*WinfeedProductReportNamesResponse)(nil),             // 4: samantra.services.master.WinfeedProductReportNamesResponse
	(*WinfeedProductReportName)(nil),                      // 5: samantra.services.master.WinfeedProductReportName
	(*WinfeedProductReportIDsResponse)(nil),               // 6: samantra.services.master.WinfeedProductReportIDsResponse
	(*WinfeedProductReportID)(nil),                        // 7: samantra.services.master.WinfeedProductReportID
	(*Plant)(nil),                                         // 8: samantra.services.master.Plant
	(*PlantsResponse)(nil),                                // 9: samantra.services.master.PlantsResponse
	(*Org)(nil),                                           // 10: samantra.services.master.Org
	(*OrgsResponse)(nil),                                  // 11: samantra.services.master.OrgsResponse
	(*SubOrg)(nil),                                        // 12: samantra.services.master.SubOrg
	(*SubOrgsResponse)(nil),                               // 13: samantra.services.master.SubOrgsResponse
	(*GetWinfeedProductComponentsWithSubIDsRequest)(nil),  // 14: samantra.services.master.GetWinfeedProductComponentsWithSubIDsRequest
	(*WinfeedProductComponentsResponse)(nil),              // 15: samantra.services.master.WinfeedProductComponentsResponse
	(*WinfeedProductComponent)(nil),                       // 16: samantra.services.master.WinfeedProductComponent
	(*WinfeedSubProductComponent)(nil),                    // 17: samantra.services.master.WinfeedSubProductComponent
	(*WinfeedProduct)(nil),                                // 18: samantra.services.master.WinfeedProduct
	(*GetWinfeedDivisionRequest)(nil),                     // 19: samantra.services.master.GetWinfeedDivisionRequest
	(*GetWinfeedDivisionListResponse)(nil),                // 20: samantra.services.master.GetWinfeedDivisionListResponse
	(*GetWinfeedDivisionResponse)(nil),                    // 21: samantra.services.master.GetWinfeedDivisionResponse
	(*WinfeedDivision)(nil),                               // 22: samantra.services.master.WinfeedDivision
	(*ListWinfeedProductByDivisionIDRequest)(nil),         // 23: samantra.services.master.ListWinfeedProductByDivisionIDRequest
	(*ListWinfeedProductByDivisionIDResponse)(nil),        // 24: samantra.services.master.ListWinfeedProductByDivisionIDResponse
	(*ListWinfeedStockRequest)(nil),                       // 25: samantra.services.master.ListWinfeedStockRequest
	(*ListWinfeedStockResponse)(nil),                      // 26: samantra.services.master.ListWinfeedStockResponse
	(*ListWinfeedPurchaseRequest)(nil),                    // 27: samantra.services.master.ListWinfeedPurchaseRequest
	(*ListWinfeedPurchaseResponse)(nil),                   // 28: samantra.services.master.ListWinfeedPurchaseResponse
	(*ListWinfeedDailyPriceRequest)(nil),                  // 29: samantra.services.master.ListWinfeedDailyPriceRequest
	(*ListWinfeedDailyPriceResponse)(nil),                 // 30: samantra.services.master.ListWinfeedDailyPriceResponse
	(*WinfeedGrade)(nil),                                  // 31: samantra.services.master.WinfeedGrade
	(*GetWinfeedGradeListResponse)(nil),                   // 32: samantra.services.master.GetWinfeedGradeListResponse
	(*timestamppb.Timestamp)(nil),                         // 33: google.protobuf.Timestamp
	(*winfeed_stock_service.WinfeedStock)(nil),            // 34: samantra.services.master.winfeed_stock.WinfeedStock
	(*winfeed_purchase_service.WinfeedPurchase)(nil),      // 35: samantra.services.master.winfeed_purchase.WinfeedPurchase
	(*winfeed_daily_price_service.WinfeedDailyPrice)(nil), // 36: samantra.services.master.winfeed_daily_price.WinfeedDailyPrice
}
var file_samantra_services_master_service_master_proto_depIdxs = []int32{
	1,  // 0: samantra.services.master.UsersResponse.Users:type_name -> samantra.services.master.User
	8,  // 1: samantra.services.master.PlantsResponse.plants:type_name -> samantra.services.master.Plant
	10, // 2: samantra.services.master.OrgsResponse.orgs:type_name -> samantra.services.master.Org
	12, // 3: samantra.services.master.SubOrgsResponse.subOrgs:type_name -> samantra.services.master.SubOrg
	16, // 4: samantra.services.master.WinfeedProductComponentsResponse.WinfeedProductComponents:type_name -> samantra.services.master.WinfeedProductComponent
	17, // 5: samantra.services.master.WinfeedProductComponent.WinfeedSubProductReportComponents:type_name -> samantra.services.master.WinfeedSubProductComponent
	18, // 6: samantra.services.master.WinfeedSubProductComponent.WinfeedProducts:type_name -> samantra.services.master.WinfeedProduct
	22, // 7: samantra.services.master.GetWinfeedDivisionListResponse.WinfeedDivisionList:type_name -> samantra.services.master.WinfeedDivision
	22, // 8: samantra.services.master.GetWinfeedDivisionResponse.winfeed_division:type_name -> samantra.services.master.WinfeedDivision
	18, // 9: samantra.services.master.ListWinfeedProductByDivisionIDResponse.winfeed_product_list:type_name -> samantra.services.master.WinfeedProduct
	33, // 10: samantra.services.master.ListWinfeedStockRequest.startDate:type_name -> google.protobuf.Timestamp
	33, // 11: samantra.services.master.ListWinfeedStockRequest.endDate:type_name -> google.protobuf.Timestamp
	34, // 12: samantra.services.master.ListWinfeedStockResponse.listWinfeedStock:type_name -> samantra.services.master.winfeed_stock.WinfeedStock
	33, // 13: samantra.services.master.ListWinfeedPurchaseRequest.startDate:type_name -> google.protobuf.Timestamp
	33, // 14: samantra.services.master.ListWinfeedPurchaseRequest.endDate:type_name -> google.protobuf.Timestamp
	35, // 15: samantra.services.master.ListWinfeedPurchaseResponse.listWinfeedPurchase:type_name -> samantra.services.master.winfeed_purchase.WinfeedPurchase
	33, // 16: samantra.services.master.ListWinfeedDailyPriceRequest.startDate:type_name -> google.protobuf.Timestamp
	33, // 17: samantra.services.master.ListWinfeedDailyPriceRequest.endDate:type_name -> google.protobuf.Timestamp
	36, // 18: samantra.services.master.ListWinfeedDailyPriceResponse.listWinfeedDailyPrice:type_name -> samantra.services.master.winfeed_daily_price.WinfeedDailyPrice
	31, // 19: samantra.services.master.GetWinfeedGradeListResponse.WinfeedGradeList:type_name -> samantra.services.master.WinfeedGrade
	0,  // 20: samantra.services.master.Master.GetUsers:input_type -> samantra.services.master.Empty
	0,  // 21: samantra.services.master.Master.GetProductCodesWithPermission:input_type -> samantra.services.master.Empty
	0,  // 22: samantra.services.master.Master.GetWinfeedProductReportNamesWithPermission:input_type -> samantra.services.master.Empty
	0,  // 23: samantra.services.master.Master.GetWinfeedProductReportIDsWithPermission:input_type -> samantra.services.master.Empty
	5,  // 24: samantra.services.master.Master.GetProductCodesFromWinfeedProductReportName:input_type -> samantra.services.master.WinfeedProductReportName
	7,  // 25: samantra.services.master.Master.GetProductCodesFromWinfeedProductReportID:input_type -> samantra.services.master.WinfeedProductReportID
	0,  // 26: samantra.services.master.Master.GetAllPlants:input_type -> samantra.services.master.Empty
	0,  // 27: samantra.services.master.Master.GetPlants:input_type -> samantra.services.master.Empty
	0,  // 28: samantra.services.master.Master.GetPlantsAgro:input_type -> samantra.services.master.Empty
	0,  // 29: samantra.services.master.Master.GetOrgs:input_type -> samantra.services.master.Empty
	0,  // 30: samantra.services.master.Master.GetOrgsAgro:input_type -> samantra.services.master.Empty
	0,  // 31: samantra.services.master.Master.GetSubOrgs:input_type -> samantra.services.master.Empty
	14, // 32: samantra.services.master.Master.GetWinfeedProductComponentsWithSubIDs:input_type -> samantra.services.master.GetWinfeedProductComponentsWithSubIDsRequest
	0,  // 33: samantra.services.master.Master.GetWinfeedDivisionList:input_type -> samantra.services.master.Empty
	0,  // 34: samantra.services.master.Master.GetWinfeedDivisionListWithPermission:input_type -> samantra.services.master.Empty
	19, // 35: samantra.services.master.Master.GetWinfeedDivision:input_type -> samantra.services.master.GetWinfeedDivisionRequest
	23, // 36: samantra.services.master.Master.ListWinfeedProductByDivisionID:input_type -> samantra.services.master.ListWinfeedProductByDivisionIDRequest
	25, // 37: samantra.services.master.Master.ListWinfeedStock:input_type -> samantra.services.master.ListWinfeedStockRequest
	27, // 38: samantra.services.master.Master.ListWinfeedPurchase:input_type -> samantra.services.master.ListWinfeedPurchaseRequest
	29, // 39: samantra.services.master.Master.ListWinfeedDailyPrice:input_type -> samantra.services.master.ListWinfeedDailyPriceRequest
	0,  // 40: samantra.services.master.Master.GetWinfeedGradeList:input_type -> samantra.services.master.Empty
	0,  // 41: samantra.services.master.Master.ListWinfeedProduct:input_type -> samantra.services.master.Empty
	2,  // 42: samantra.services.master.Master.GetUsers:output_type -> samantra.services.master.UsersResponse
	3,  // 43: samantra.services.master.Master.GetProductCodesWithPermission:output_type -> samantra.services.master.ProductCodesResponse
	4,  // 44: samantra.services.master.Master.GetWinfeedProductReportNamesWithPermission:output_type -> samantra.services.master.WinfeedProductReportNamesResponse
	6,  // 45: samantra.services.master.Master.GetWinfeedProductReportIDsWithPermission:output_type -> samantra.services.master.WinfeedProductReportIDsResponse
	3,  // 46: samantra.services.master.Master.GetProductCodesFromWinfeedProductReportName:output_type -> samantra.services.master.ProductCodesResponse
	3,  // 47: samantra.services.master.Master.GetProductCodesFromWinfeedProductReportID:output_type -> samantra.services.master.ProductCodesResponse
	9,  // 48: samantra.services.master.Master.GetAllPlants:output_type -> samantra.services.master.PlantsResponse
	9,  // 49: samantra.services.master.Master.GetPlants:output_type -> samantra.services.master.PlantsResponse
	9,  // 50: samantra.services.master.Master.GetPlantsAgro:output_type -> samantra.services.master.PlantsResponse
	11, // 51: samantra.services.master.Master.GetOrgs:output_type -> samantra.services.master.OrgsResponse
	11, // 52: samantra.services.master.Master.GetOrgsAgro:output_type -> samantra.services.master.OrgsResponse
	13, // 53: samantra.services.master.Master.GetSubOrgs:output_type -> samantra.services.master.SubOrgsResponse
	15, // 54: samantra.services.master.Master.GetWinfeedProductComponentsWithSubIDs:output_type -> samantra.services.master.WinfeedProductComponentsResponse
	20, // 55: samantra.services.master.Master.GetWinfeedDivisionList:output_type -> samantra.services.master.GetWinfeedDivisionListResponse
	20, // 56: samantra.services.master.Master.GetWinfeedDivisionListWithPermission:output_type -> samantra.services.master.GetWinfeedDivisionListResponse
	21, // 57: samantra.services.master.Master.GetWinfeedDivision:output_type -> samantra.services.master.GetWinfeedDivisionResponse
	24, // 58: samantra.services.master.Master.ListWinfeedProductByDivisionID:output_type -> samantra.services.master.ListWinfeedProductByDivisionIDResponse
	26, // 59: samantra.services.master.Master.ListWinfeedStock:output_type -> samantra.services.master.ListWinfeedStockResponse
	28, // 60: samantra.services.master.Master.ListWinfeedPurchase:output_type -> samantra.services.master.ListWinfeedPurchaseResponse
	30, // 61: samantra.services.master.Master.ListWinfeedDailyPrice:output_type -> samantra.services.master.ListWinfeedDailyPriceResponse
	32, // 62: samantra.services.master.Master.GetWinfeedGradeList:output_type -> samantra.services.master.GetWinfeedGradeListResponse
	24, // 63: samantra.services.master.Master.ListWinfeedProduct:output_type -> samantra.services.master.ListWinfeedProductByDivisionIDResponse
	42, // [42:64] is the sub-list for method output_type
	20, // [20:42] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_samantra_services_master_service_master_proto_init() }
func file_samantra_services_master_service_master_proto_init() {
	if File_samantra_services_master_service_master_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_samantra_services_master_service_master_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductCodesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductReportNamesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductReportName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductReportIDsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductReportID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Org); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubOrgsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinfeedProductComponentsWithSubIDsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductComponentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProductComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedSubProductComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinfeedDivisionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinfeedDivisionListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinfeedDivisionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedDivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedProductByDivisionIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedProductByDivisionIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedStockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedStockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedPurchaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedPurchaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedDailyPriceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWinfeedDailyPriceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinfeedGrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_samantra_services_master_service_master_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWinfeedGradeListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_samantra_services_master_service_master_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_samantra_services_master_service_master_proto_goTypes,
		DependencyIndexes: file_samantra_services_master_service_master_proto_depIdxs,
		MessageInfos:      file_samantra_services_master_service_master_proto_msgTypes,
	}.Build()
	File_samantra_services_master_service_master_proto = out.File
	file_samantra_services_master_service_master_proto_rawDesc = nil
	file_samantra_services_master_service_master_proto_goTypes = nil
	file_samantra_services_master_service_master_proto_depIdxs = nil
}
