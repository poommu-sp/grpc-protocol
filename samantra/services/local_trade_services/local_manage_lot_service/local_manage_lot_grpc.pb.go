// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package local_manage_lot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalManageLotClient is the client API for LocalManageLot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalManageLotClient interface {
	GetInterTradeWayByParam(ctx context.Context, in *LocalManageLotForOSPayload, opts ...grpc.CallOption) (*LocalManageLotForOSResponse, error)
	GetLocalTradeWayByParam(ctx context.Context, in *LocalManageLotForOSPayload, opts ...grpc.CallOption) (*LocalManageLotForOSResponse, error)
}

type localManageLotClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalManageLotClient(cc grpc.ClientConnInterface) LocalManageLotClient {
	return &localManageLotClient{cc}
}

func (c *localManageLotClient) GetInterTradeWayByParam(ctx context.Context, in *LocalManageLotForOSPayload, opts ...grpc.CallOption) (*LocalManageLotForOSResponse, error) {
	out := new(LocalManageLotForOSResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.local_trade.local_manage_lot.LocalManageLot/GetInterTradeWayByParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *localManageLotClient) GetLocalTradeWayByParam(ctx context.Context, in *LocalManageLotForOSPayload, opts ...grpc.CallOption) (*LocalManageLotForOSResponse, error) {
	out := new(LocalManageLotForOSResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.local_trade.local_manage_lot.LocalManageLot/GetLocalTradeWayByParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocalManageLotServer is the server API for LocalManageLot service.
// All implementations must embed UnimplementedLocalManageLotServer
// for forward compatibility
type LocalManageLotServer interface {
	GetInterTradeWayByParam(context.Context, *LocalManageLotForOSPayload) (*LocalManageLotForOSResponse, error)
	GetLocalTradeWayByParam(context.Context, *LocalManageLotForOSPayload) (*LocalManageLotForOSResponse, error)
	mustEmbedUnimplementedLocalManageLotServer()
}

// UnimplementedLocalManageLotServer must be embedded to have forward compatible implementations.
type UnimplementedLocalManageLotServer struct {
}

func (UnimplementedLocalManageLotServer) GetInterTradeWayByParam(context.Context, *LocalManageLotForOSPayload) (*LocalManageLotForOSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterTradeWayByParam not implemented")
}
func (UnimplementedLocalManageLotServer) GetLocalTradeWayByParam(context.Context, *LocalManageLotForOSPayload) (*LocalManageLotForOSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalTradeWayByParam not implemented")
}
func (UnimplementedLocalManageLotServer) mustEmbedUnimplementedLocalManageLotServer() {}

// UnsafeLocalManageLotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalManageLotServer will
// result in compilation errors.
type UnsafeLocalManageLotServer interface {
	mustEmbedUnimplementedLocalManageLotServer()
}

func RegisterLocalManageLotServer(s grpc.ServiceRegistrar, srv LocalManageLotServer) {
	s.RegisterService(&LocalManageLot_ServiceDesc, srv)
}

func _LocalManageLot_GetInterTradeWayByParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalManageLotForOSPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalManageLotServer).GetInterTradeWayByParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.local_trade.local_manage_lot.LocalManageLot/GetInterTradeWayByParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalManageLotServer).GetInterTradeWayByParam(ctx, req.(*LocalManageLotForOSPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocalManageLot_GetLocalTradeWayByParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocalManageLotForOSPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocalManageLotServer).GetLocalTradeWayByParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.local_trade.local_manage_lot.LocalManageLot/GetLocalTradeWayByParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocalManageLotServer).GetLocalTradeWayByParam(ctx, req.(*LocalManageLotForOSPayload))
	}
	return interceptor(ctx, in, info, handler)
}

// LocalManageLot_ServiceDesc is the grpc.ServiceDesc for LocalManageLot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalManageLot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.local_trade.local_manage_lot.LocalManageLot",
	HandlerType: (*LocalManageLotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInterTradeWayByParam",
			Handler:    _LocalManageLot_GetInterTradeWayByParam_Handler,
		},
		{
			MethodName: "GetLocalTradeWayByParam",
			Handler:    _LocalManageLot_GetLocalTradeWayByParam_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/local_trade_services/local_manage_lot_service/local_manage_lot.proto",
}
