// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rm2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RM2Client is the client API for RM2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RM2Client interface {
	ListWarehouseSummaryByLot(ctx context.Context, in *ListWarehouseSummaryByLotRequest, opts ...grpc.CallOption) (*ListWarehouseSummaryByLotResponse, error)
	ListPhanthaOTW(ctx context.Context, in *ListPhanthaOTWRequest, opts ...grpc.CallOption) (*ListPhanthaOTWResponse, error)
	ListProcessings(ctx context.Context, in *ListProcessingRequest, opts ...grpc.CallOption) (*ListProcessingResponse, error)
}

type rM2Client struct {
	cc grpc.ClientConnInterface
}

func NewRM2Client(cc grpc.ClientConnInterface) RM2Client {
	return &rM2Client{cc}
}

func (c *rM2Client) ListWarehouseSummaryByLot(ctx context.Context, in *ListWarehouseSummaryByLotRequest, opts ...grpc.CallOption) (*ListWarehouseSummaryByLotResponse, error) {
	out := new(ListWarehouseSummaryByLotResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.rm2.RM2/ListWarehouseSummaryByLot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rM2Client) ListPhanthaOTW(ctx context.Context, in *ListPhanthaOTWRequest, opts ...grpc.CallOption) (*ListPhanthaOTWResponse, error) {
	out := new(ListPhanthaOTWResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.rm2.RM2/ListPhanthaOTW", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rM2Client) ListProcessings(ctx context.Context, in *ListProcessingRequest, opts ...grpc.CallOption) (*ListProcessingResponse, error) {
	out := new(ListProcessingResponse)
	err := c.cc.Invoke(ctx, "/samantra.services.rm2.RM2/ListProcessings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RM2Server is the server API for RM2 service.
// All implementations must embed UnimplementedRM2Server
// for forward compatibility
type RM2Server interface {
	ListWarehouseSummaryByLot(context.Context, *ListWarehouseSummaryByLotRequest) (*ListWarehouseSummaryByLotResponse, error)
	ListPhanthaOTW(context.Context, *ListPhanthaOTWRequest) (*ListPhanthaOTWResponse, error)
	ListProcessings(context.Context, *ListProcessingRequest) (*ListProcessingResponse, error)
	mustEmbedUnimplementedRM2Server()
}

// UnimplementedRM2Server must be embedded to have forward compatible implementations.
type UnimplementedRM2Server struct {
}

func (UnimplementedRM2Server) ListWarehouseSummaryByLot(context.Context, *ListWarehouseSummaryByLotRequest) (*ListWarehouseSummaryByLotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWarehouseSummaryByLot not implemented")
}
func (UnimplementedRM2Server) ListPhanthaOTW(context.Context, *ListPhanthaOTWRequest) (*ListPhanthaOTWResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhanthaOTW not implemented")
}
func (UnimplementedRM2Server) ListProcessings(context.Context, *ListProcessingRequest) (*ListProcessingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProcessings not implemented")
}
func (UnimplementedRM2Server) mustEmbedUnimplementedRM2Server() {}

// UnsafeRM2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RM2Server will
// result in compilation errors.
type UnsafeRM2Server interface {
	mustEmbedUnimplementedRM2Server()
}

func RegisterRM2Server(s grpc.ServiceRegistrar, srv RM2Server) {
	s.RegisterService(&RM2_ServiceDesc, srv)
}

func _RM2_ListWarehouseSummaryByLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWarehouseSummaryByLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RM2Server).ListWarehouseSummaryByLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.rm2.RM2/ListWarehouseSummaryByLot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RM2Server).ListWarehouseSummaryByLot(ctx, req.(*ListWarehouseSummaryByLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RM2_ListPhanthaOTW_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhanthaOTWRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RM2Server).ListPhanthaOTW(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.rm2.RM2/ListPhanthaOTW",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RM2Server).ListPhanthaOTW(ctx, req.(*ListPhanthaOTWRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RM2_ListProcessings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProcessingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RM2Server).ListProcessings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/samantra.services.rm2.RM2/ListProcessings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RM2Server).ListProcessings(ctx, req.(*ListProcessingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RM2_ServiceDesc is the grpc.ServiceDesc for RM2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RM2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "samantra.services.rm2.RM2",
	HandlerType: (*RM2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListWarehouseSummaryByLot",
			Handler:    _RM2_ListWarehouseSummaryByLot_Handler,
		},
		{
			MethodName: "ListPhanthaOTW",
			Handler:    _RM2_ListPhanthaOTW_Handler,
		},
		{
			MethodName: "ListProcessings",
			Handler:    _RM2_ListProcessings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "samantra/services/rm2_services/rm2.proto",
}
