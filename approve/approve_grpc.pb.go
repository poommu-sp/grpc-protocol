// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package approve

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApproveClient is the client API for Approve service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApproveClient interface {
	InitApprovalOperationList(ctx context.Context, in *InitApprovalOperationListRequest, opts ...grpc.CallOption) (*InitApprovalOperationListResponse, error)
	RollbackInitApprovalOperationList(ctx context.Context, in *InitApprovalOperationListRequest, opts ...grpc.CallOption) (*Empty, error)
	Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error)
	Acknowledge(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error)
	Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error)
	RollbackApprovalOperation(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Empty, error)
	ApprovalOperationListByMenu(ctx context.Context, in *ApprovalOperationListByMenuRequest, opts ...grpc.CallOption) (*ApprovalOperationListByMenuResponse, error)
	GetCurrentApprovalEvent(ctx context.Context, in *ApproveEventRequest, opts ...grpc.CallOption) (*ApproveEventResponse, error)
}

type approveClient struct {
	cc grpc.ClientConnInterface
}

func NewApproveClient(cc grpc.ClientConnInterface) ApproveClient {
	return &approveClient{cc}
}

func (c *approveClient) InitApprovalOperationList(ctx context.Context, in *InitApprovalOperationListRequest, opts ...grpc.CallOption) (*InitApprovalOperationListResponse, error) {
	out := new(InitApprovalOperationListResponse)
	err := c.cc.Invoke(ctx, "/approve.Approve/InitApprovalOperationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) RollbackInitApprovalOperationList(ctx context.Context, in *InitApprovalOperationListRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/approve.Approve/RollbackInitApprovalOperationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) Approve(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*ApproveResponse, error) {
	out := new(ApproveResponse)
	err := c.cc.Invoke(ctx, "/approve.Approve/Approve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) Acknowledge(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*AcknowledgeResponse, error) {
	out := new(AcknowledgeResponse)
	err := c.cc.Invoke(ctx, "/approve.Approve/Acknowledge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) Reject(ctx context.Context, in *RejectRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/approve.Approve/Reject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) RollbackApprovalOperation(ctx context.Context, in *ApproveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/approve.Approve/RollbackApprovalOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) ApprovalOperationListByMenu(ctx context.Context, in *ApprovalOperationListByMenuRequest, opts ...grpc.CallOption) (*ApprovalOperationListByMenuResponse, error) {
	out := new(ApprovalOperationListByMenuResponse)
	err := c.cc.Invoke(ctx, "/approve.Approve/ApprovalOperationListByMenu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *approveClient) GetCurrentApprovalEvent(ctx context.Context, in *ApproveEventRequest, opts ...grpc.CallOption) (*ApproveEventResponse, error) {
	out := new(ApproveEventResponse)
	err := c.cc.Invoke(ctx, "/approve.Approve/GetCurrentApprovalEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApproveServer is the server API for Approve service.
// All implementations must embed UnimplementedApproveServer
// for forward compatibility
type ApproveServer interface {
	InitApprovalOperationList(context.Context, *InitApprovalOperationListRequest) (*InitApprovalOperationListResponse, error)
	RollbackInitApprovalOperationList(context.Context, *InitApprovalOperationListRequest) (*Empty, error)
	Approve(context.Context, *ApproveRequest) (*ApproveResponse, error)
	Acknowledge(context.Context, *ApproveRequest) (*AcknowledgeResponse, error)
	Reject(context.Context, *RejectRequest) (*Empty, error)
	RollbackApprovalOperation(context.Context, *ApproveRequest) (*Empty, error)
	ApprovalOperationListByMenu(context.Context, *ApprovalOperationListByMenuRequest) (*ApprovalOperationListByMenuResponse, error)
	GetCurrentApprovalEvent(context.Context, *ApproveEventRequest) (*ApproveEventResponse, error)
	mustEmbedUnimplementedApproveServer()
}

// UnimplementedApproveServer must be embedded to have forward compatible implementations.
type UnimplementedApproveServer struct {
}

func (UnimplementedApproveServer) InitApprovalOperationList(context.Context, *InitApprovalOperationListRequest) (*InitApprovalOperationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitApprovalOperationList not implemented")
}
func (UnimplementedApproveServer) RollbackInitApprovalOperationList(context.Context, *InitApprovalOperationListRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackInitApprovalOperationList not implemented")
}
func (UnimplementedApproveServer) Approve(context.Context, *ApproveRequest) (*ApproveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedApproveServer) Acknowledge(context.Context, *ApproveRequest) (*AcknowledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acknowledge not implemented")
}
func (UnimplementedApproveServer) Reject(context.Context, *RejectRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedApproveServer) RollbackApprovalOperation(context.Context, *ApproveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackApprovalOperation not implemented")
}
func (UnimplementedApproveServer) ApprovalOperationListByMenu(context.Context, *ApprovalOperationListByMenuRequest) (*ApprovalOperationListByMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApprovalOperationListByMenu not implemented")
}
func (UnimplementedApproveServer) GetCurrentApprovalEvent(context.Context, *ApproveEventRequest) (*ApproveEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentApprovalEvent not implemented")
}
func (UnimplementedApproveServer) mustEmbedUnimplementedApproveServer() {}

// UnsafeApproveServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApproveServer will
// result in compilation errors.
type UnsafeApproveServer interface {
	mustEmbedUnimplementedApproveServer()
}

func RegisterApproveServer(s grpc.ServiceRegistrar, srv ApproveServer) {
	s.RegisterService(&Approve_ServiceDesc, srv)
}

func _Approve_InitApprovalOperationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitApprovalOperationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).InitApprovalOperationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/InitApprovalOperationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).InitApprovalOperationList(ctx, req.(*InitApprovalOperationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_RollbackInitApprovalOperationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitApprovalOperationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).RollbackInitApprovalOperationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/RollbackInitApprovalOperationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).RollbackInitApprovalOperationList(ctx, req.(*InitApprovalOperationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/Approve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).Approve(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_Acknowledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).Acknowledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/Acknowledge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).Acknowledge(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/Reject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).Reject(ctx, req.(*RejectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_RollbackApprovalOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).RollbackApprovalOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/RollbackApprovalOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).RollbackApprovalOperation(ctx, req.(*ApproveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_ApprovalOperationListByMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApprovalOperationListByMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).ApprovalOperationListByMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/ApprovalOperationListByMenu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).ApprovalOperationListByMenu(ctx, req.(*ApprovalOperationListByMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Approve_GetCurrentApprovalEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApproveServer).GetCurrentApprovalEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/approve.Approve/GetCurrentApprovalEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApproveServer).GetCurrentApprovalEvent(ctx, req.(*ApproveEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Approve_ServiceDesc is the grpc.ServiceDesc for Approve service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Approve_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "approve.Approve",
	HandlerType: (*ApproveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitApprovalOperationList",
			Handler:    _Approve_InitApprovalOperationList_Handler,
		},
		{
			MethodName: "RollbackInitApprovalOperationList",
			Handler:    _Approve_RollbackInitApprovalOperationList_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _Approve_Approve_Handler,
		},
		{
			MethodName: "Acknowledge",
			Handler:    _Approve_Acknowledge_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _Approve_Reject_Handler,
		},
		{
			MethodName: "RollbackApprovalOperation",
			Handler:    _Approve_RollbackApprovalOperation_Handler,
		},
		{
			MethodName: "ApprovalOperationListByMenu",
			Handler:    _Approve_ApprovalOperationListByMenu_Handler,
		},
		{
			MethodName: "GetCurrentApprovalEvent",
			Handler:    _Approve_GetCurrentApprovalEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "approve/approve.proto",
}
